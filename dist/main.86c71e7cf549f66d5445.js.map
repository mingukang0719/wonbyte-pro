{"version":3,"file":"main.86c71e7cf549f66d5445.js","mappings":"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","sources":["webpack://wonbyte-pro/webpack/runtime/chunk loaded","webpack://wonbyte-pro/webpack/runtime/create fake namespace object","webpack://wonbyte-pro/webpack/runtime/load script","webpack://wonbyte-pro/./src/pages/HomePage.jsx","webpack://wonbyte-pro/./src/components/Editor/TextBlock.jsx","webpack://wonbyte-pro/./src/pages/EditorPage.jsx","webpack://wonbyte-pro/./src/utils/constants.js","webpack://wonbyte-pro/./src/components/common/ErrorMessage.jsx","webpack://wonbyte-pro/./src/components/common/ProgressBar.jsx","webpack://wonbyte-pro/./src/components/literacy/AnalysisChart.jsx","webpack://wonbyte-pro/./src/components/literacy/ProblemCard.jsx","webpack://wonbyte-pro/./src/components/common/EditableText.jsx","webpack://wonbyte-pro/./src/components/literacy/TextDisplay.jsx","webpack://wonbyte-pro/./src/components/literacy/VocabularyExtractor.jsx","webpack://wonbyte-pro/./src/components/literacy/ProblemGenerator.jsx","webpack://wonbyte-pro/./src/pages/ReadingTrainerPage.jsx","webpack://wonbyte-pro/./src/hooks/useTextAnalysis.js","webpack://wonbyte-pro/./src/hooks/useApiCall.js","webpack://wonbyte-pro/./src/utils/validation.js","webpack://wonbyte-pro/./src/pages/AdminLogin.jsx","webpack://wonbyte-pro/./src/pages/AdminDashboard.jsx","webpack://wonbyte-pro/./src/lib/supabase.js","webpack://wonbyte-pro/./src/components/Admin/TemplateManager.jsx","webpack://wonbyte-pro/./src/components/Admin/ContentGenerator.jsx","webpack://wonbyte-pro/./src/pages/AdminDashboardWithRoutes.jsx","webpack://wonbyte-pro/./src/App.jsx","webpack://wonbyte-pro/./src/main.jsx","webpack://wonbyte-pro/./src/config/apiKeys.js","webpack://wonbyte-pro/./src/config/index.js","webpack://wonbyte-pro/./src/services/demoService.js","webpack://wonbyte-pro/./src/utils/security.js","webpack://wonbyte-pro/./src/services/clientAIService.js","webpack://wonbyte-pro/./src/services/aiService.js","webpack://wonbyte-pro/webpack/bootstrap","webpack://wonbyte-pro/webpack/runtime/define property getters","webpack://wonbyte-pro/webpack/runtime/ensure chunk","webpack://wonbyte-pro/webpack/runtime/get javascript chunk filename","webpack://wonbyte-pro/webpack/runtime/get mini-css chunk filename","webpack://wonbyte-pro/webpack/runtime/global","webpack://wonbyte-pro/webpack/runtime/hasOwnProperty shorthand","webpack://wonbyte-pro/webpack/runtime/make namespace object","webpack://wonbyte-pro/webpack/runtime/publicPath","webpack://wonbyte-pro/webpack/runtime/jsonp chunk loading","webpack://wonbyte-pro/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"wonbyte-pro:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { Link } from 'react-router-dom'\r\nimport { FileText, Palette, Zap, Download, ArrowRight, Sparkles } from 'lucide-react'\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\r\n      {/* Header */}\r\n      <header className=\"bg-white/80 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-50\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex justify-between items-center py-4\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-2 rounded-lg\">\r\n                <FileText className=\"h-6 w-6 text-white\" />\r\n              </div>\r\n              <h1 className=\"ml-3 text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n                원바이트 PRO\r\n              </h1>\r\n              <span className=\"ml-2 px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full\">\r\n                문해력 훈련\r\n              </span>\r\n            </div>\r\n            <nav className=\"hidden md:flex items-center space-x-8\">\r\n              <a href=\"#features\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">기능</a>\r\n              <Link \r\n                to=\"/reading-trainer\" \r\n                className=\"text-gray-600 hover:text-gray-900 transition-colors\"\r\n              >\r\n                문해력 훈련\r\n              </Link>\r\n              <Link \r\n                to=\"/editor\" \r\n                className=\"text-gray-600 hover:text-gray-900 transition-colors\"\r\n              >\r\n                학습자료 제작\r\n              </Link>\r\n              <Link \r\n                to=\"/admin/login\" \r\n                className=\"text-gray-600 hover:text-gray-900 transition-colors\"\r\n              >\r\n                관리자\r\n              </Link>\r\n              <Link\r\n                to=\"/reading-trainer\"\r\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-200\"\r\n              >\r\n                시작하기\r\n              </Link>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Hero Section */}\r\n      <main className=\"relative\">\r\n        {/* Background decoration */}\r\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\r\n          <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-200 rounded-full opacity-20 blur-3xl\"></div>\r\n          <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-blue-200 rounded-full opacity-20 blur-3xl\"></div>\r\n        </div>\r\n\r\n        <section className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16\">\r\n          <div className=\"text-center\">\r\n            <h2 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6\">\r\n              AI 기반 맞춤형\r\n              <br />\r\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n                한국어 문해력 훈련\r\n              </span>\r\n            </h2>\r\n            <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto leading-relaxed\">\r\n              아이들이 좋아하는 주제로 흥미롭게 읽기 실력을 키워요!\r\n              <br />\r\n              AI가 학년별 맞춤 지문과 문제를 자동으로 생성합니다\r\n            </p>\r\n            \r\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\r\n              <Link\r\n                to=\"/reading-trainer\"\r\n                className=\"group bg-gradient-to-r from-blue-600 to-purple-600 text-white px-8 py-4 rounded-xl text-lg font-semibold hover:shadow-xl transition-all duration-300 flex items-center\"\r\n              >\r\n                문해력 훈련 시작하기\r\n                <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\r\n              </Link>\r\n              <Link\r\n                to=\"/editor\"\r\n                className=\"border-2 border-gray-300 text-gray-700 px-8 py-4 rounded-xl text-lg font-semibold hover:border-blue-300 hover:text-blue-600 transition-all duration-300\"\r\n              >\r\n                학습자료 제작하기\r\n              </Link>\r\n            </div>\r\n\r\n            {/* Demo Preview */}\r\n            <div className=\"relative max-w-4xl mx-auto\">\r\n              <div className=\"bg-white rounded-2xl shadow-2xl p-8 border border-gray-200\">\r\n                <div className=\"bg-gray-50 rounded-xl p-6 mb-6\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-800\">문해력 훈련 3단계 프로세스</h3>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\r\n                      <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\r\n                      <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bg-white rounded-lg p-4 shadow-inner\">\r\n                    <div className=\"grid grid-cols-3 gap-4\">\r\n                      <div className=\"text-center p-4 border-2 border-blue-200 rounded-lg bg-blue-50\">\r\n                        <div className=\"text-blue-600 font-bold text-2xl mb-2\">1</div>\r\n                        <p className=\"font-semibold\">지문 준비</p>\r\n                        <p className=\"text-sm text-gray-600 mt-1\">AI 생성 또는 직접 입력</p>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border-2 border-purple-200 rounded-lg bg-purple-50\">\r\n                        <div className=\"text-purple-600 font-bold text-2xl mb-2\">2</div>\r\n                        <p className=\"font-semibold\">문해력 분석</p>\r\n                        <p className=\"text-sm text-gray-600 mt-1\">5가지 기준 난이도 평가</p>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border-2 border-green-200 rounded-lg bg-green-50\">\r\n                        <div className=\"text-green-600 font-bold text-2xl mb-2\">3</div>\r\n                        <p className=\"font-semibold\">문제 풀이</p>\r\n                        <p className=\"text-sm text-gray-600 mt-1\">어휘·독해 문제 자동 생성</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Features Section */}\r\n        <section id=\"features\" className=\"relative py-20 bg-white\">\r\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n            <div className=\"text-center mb-16\">\r\n              <h3 className=\"text-4xl font-bold text-gray-900 mb-4\">강력한 기능</h3>\r\n              <p className=\"text-xl text-gray-600\">체계적인 한국어 문해력 향상을 위한 핵심 기능</p>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\r\n              <div className=\"text-center group\">\r\n                <div className=\"bg-gradient-to-br from-blue-100 to-blue-200 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n                  <Sparkles className=\"h-8 w-8 text-blue-600 mx-auto\" />\r\n                </div>\r\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">맞춤형 지문 생성</h4>\r\n                <p className=\"text-gray-600\">아이의 관심사와 학년에 맞춘 AI 기반 읽기 지문 자동 생성</p>\r\n              </div>\r\n              \r\n              <div className=\"text-center group\">\r\n                <div className=\"bg-gradient-to-br from-purple-100 to-purple-200 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n                  <Palette className=\"h-8 w-8 text-purple-600 mx-auto\" />\r\n                </div>\r\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">문해력 난이도 분석</h4>\r\n                <p className=\"text-gray-600\">5가지 기준으로 지문의 난이도를 정밀하게 분석</p>\r\n              </div>\r\n              \r\n              <div className=\"text-center group\">\r\n                <div className=\"bg-gradient-to-br from-green-100 to-green-200 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n                  <Zap className=\"h-8 w-8 text-green-600 mx-auto\" />\r\n                </div>\r\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">자동 문제 생성</h4>\r\n                <p className=\"text-gray-600\">어휘, 독해, 비판적 사고 문제를 AI가 자동으로 생성</p>\r\n              </div>\r\n              \r\n              <div className=\"text-center group\">\r\n                <div className=\"bg-gradient-to-br from-orange-100 to-orange-200 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n                  <Download className=\"h-8 w-8 text-orange-600 mx-auto\" />\r\n                </div>\r\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">학습 문제집 출력</h4>\r\n                <p className=\"text-gray-600\">완성된 학습 자료를 PDF로 다운로드하여 활용</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        {/* CTA Section */}\r\n        <section className=\"relative py-20 bg-gradient-to-r from-blue-600 to-purple-600\">\r\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\r\n            <h3 className=\"text-4xl font-bold text-white mb-6\">\r\n              아이의 읽기 실력을 키워주세요\r\n            </h3>\r\n            <p className=\"text-xl text-blue-100 mb-8\">\r\n              흥미로운 주제로 시작하는 체계적인 문해력 훈련\r\n            </p>\r\n            <Link\r\n              to=\"/reading-trainer\"\r\n              className=\"inline-flex items-center bg-white text-blue-600 px-8 py-4 rounded-xl text-lg font-semibold hover:shadow-xl transition-all duration-300 group\"\r\n            >\r\n              문해력 훈련 시작하기\r\n              <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\r\n            </Link>\r\n          </div>\r\n        </section>\r\n      </main>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"bg-gray-900 text-white py-12\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\r\n            <div className=\"flex items-center mb-4 md:mb-0\">\r\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-2 rounded-lg\">\r\n                <FileText className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <span className=\"ml-2 text-lg font-semibold\">원바이트 PRO - 문해력 훈련 프로그램</span>\r\n            </div>\r\n            <div className=\"text-gray-400\">\r\n              <p>&copy; 2025 원바이트 PRO. All rights reserved.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Type, Move, RotateCw, Trash2 } from 'lucide-react'\r\n\r\nconst TextBlock = ({ \r\n  id, \r\n  x = 100, \r\n  y = 100, \r\n  width = 200, \r\n  height = 100, \r\n  text = '텍스트를 입력하세요',\r\n  fontSize = 16,\r\n  fontFamily = 'Noto Sans KR',\r\n  color = '#333333',\r\n  isSelected = false,\r\n  onSelect,\r\n  onUpdate,\r\n  onDelete \r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [isDragging, setIsDragging] = useState(false)\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 })\r\n  const [localText, setLocalText] = useState(text)\r\n  const textareaRef = useRef(null)\r\n  \r\n  const handleMouseDown = (e) => {\r\n    if (e.target.tagName === 'TEXTAREA') return\r\n    \r\n    e.preventDefault()\r\n    setIsDragging(true)\r\n    setDragStart({\r\n      x: e.clientX - x,\r\n      y: e.clientY - y\r\n    })\r\n    onSelect?.(id)\r\n  }\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDragging) return\r\n    \r\n    const newX = e.clientX - dragStart.x\r\n    const newY = e.clientY - dragStart.y\r\n    \r\n    onUpdate?.(id, { x: newX, y: newY })\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false)\r\n  }\r\n\r\n  const handleDoubleClick = () => {\r\n    setIsEditing(true)\r\n  }\r\n\r\n  const handleTextChange = (e) => {\r\n    setLocalText(e.target.value)\r\n  }\r\n\r\n  const handleTextBlur = () => {\r\n    setIsEditing(false)\r\n    if (localText !== text) {\r\n      onUpdate?.(id, { text: localText })\r\n    }\r\n  }\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault()\r\n      handleTextBlur()\r\n    } else if (e.key === 'Escape') {\r\n      setLocalText(text)\r\n      setIsEditing(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isDragging) {\r\n      document.addEventListener('mousemove', handleMouseMove)\r\n      document.addEventListener('mouseup', handleMouseUp)\r\n      \r\n      return () => {\r\n        document.removeEventListener('mousemove', handleMouseMove)\r\n        document.removeEventListener('mouseup', handleMouseUp)\r\n      }\r\n    }\r\n  }, [isDragging, dragStart])\r\n\r\n  useEffect(() => {\r\n    if (isEditing && textareaRef.current) {\r\n      textareaRef.current.focus()\r\n      textareaRef.current.select()\r\n    }\r\n  }, [isEditing])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`\r\n          absolute border-2 transition-all duration-200 cursor-move bg-white\r\n          ${isSelected \r\n            ? 'border-blue-500 shadow-lg' \r\n            : 'border-transparent hover:border-gray-300'\r\n          }\r\n          ${isDragging ? 'cursor-grabbing shadow-xl z-50' : 'cursor-grab'}\r\n        `}\r\n        style={{\r\n          left: `${x}px`,\r\n          top: `${y}px`,\r\n          width: `${width}px`,\r\n          height: `${height}px`,\r\n          fontFamily,\r\n          fontSize: `${fontSize}px`,\r\n          color\r\n        }}\r\n        onMouseDown={handleMouseDown}\r\n        onDoubleClick={handleDoubleClick}\r\n      >\r\n        {isEditing ? (\r\n          <textarea\r\n            ref={textareaRef}\r\n            value={localText}\r\n            onChange={handleTextChange}\r\n            onBlur={handleTextBlur}\r\n            onKeyDown={handleKeyDown}\r\n            className=\"w-full h-full p-2 resize-none border-none outline-none bg-transparent\"\r\n            style={{ fontFamily, fontSize: `${fontSize}px`, color }}\r\n            placeholder=\"텍스트를 입력하세요...\"\r\n          />\r\n        ) : (\r\n          <div \r\n            className=\"w-full h-full p-2 overflow-hidden\"\r\n            style={{ \r\n              fontFamily, \r\n              fontSize: `${fontSize}px`, \r\n              color,\r\n              whiteSpace: 'pre-wrap',\r\n              wordBreak: 'break-word'\r\n            }}\r\n          >\r\n            {text || '텍스트를 입력하세요'}\r\n          </div>\r\n        )}\r\n\r\n        {/* Selection Controls */}\r\n        {isSelected && !isEditing && (\r\n          <>\r\n            {/* Resize Handles */}\r\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-blue-500 border border-white cursor-se-resize\" />\r\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 border border-white cursor-ne-resize\" />\r\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-blue-500 border border-white cursor-nw-resize\" />\r\n            <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-blue-500 border border-white cursor-sw-resize\" />\r\n            \r\n            {/* Action Buttons */}\r\n            <div className=\"absolute -top-8 right-0 flex space-x-1\">\r\n              <button\r\n                onClick={() => setIsEditing(true)}\r\n                className=\"p-1 bg-blue-500 text-white rounded shadow hover:bg-blue-600\"\r\n                title=\"편집\"\r\n              >\r\n                <Type className=\"w-3 h-3\" />\r\n              </button>\r\n              <button\r\n                onClick={() => onDelete?.(id)}\r\n                className=\"p-1 bg-red-500 text-white rounded shadow hover:bg-red-600\"\r\n                title=\"삭제\"\r\n              >\r\n                <Trash2 className=\"w-3 h-3\" />\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* Block Type Indicator */}\r\n      {isSelected && (\r\n        <div\r\n          className=\"absolute bg-blue-500 text-white text-xs px-2 py-1 rounded shadow\"\r\n          style={{\r\n            left: `${x}px`,\r\n            top: `${y - 24}px`\r\n          }}\r\n        >\r\n          텍스트 블록\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextBlock","import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { \r\n  Save, \r\n  Download, \r\n  Settings, \r\n  Type, \r\n  Image, \r\n  Table, \r\n  HelpCircle,\r\n  Palette,\r\n  Zap,\r\n  Home,\r\n  Grid,\r\n  ZoomIn,\r\n  ZoomOut,\r\n  Undo,\r\n  Redo,\r\n  Sparkles\r\n} from 'lucide-react'\r\nimport TextBlock from '../components/Editor/TextBlock'\r\n\r\nexport default function EditorPage() {\r\n  const navigate = useNavigate()\r\n  const [zoom, setZoom] = useState(100)\r\n  const [showGrid, setShowGrid] = useState(true)\r\n  const [selectedTool, setSelectedTool] = useState('select')\r\n  const [aiProvider, setAiProvider] = useState('gemini')\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n  const [showAiPanel, setShowAiPanel] = useState(false)\r\n  const [aiPrompt, setAiPrompt] = useState('')\r\n  const [contentType, setContentType] = useState('reading')\r\n  const [difficulty, setDifficulty] = useState('intermediate')\r\n  const [targetAge, setTargetAge] = useState('elem1')\r\n  const [contentLength, setContentLength] = useState('400')\r\n  const [generatedContent, setGeneratedContent] = useState(null)\r\n  const [blocks, setBlocks] = useState([])\r\n  const [selectedBlockId, setSelectedBlockId] = useState(null)\r\n  \r\n  // 새로운 상태 추가\r\n  const [showVocabularyPanel, setShowVocabularyPanel] = useState(false)\r\n  const [vocabularyData, setVocabularyData] = useState(null)\r\n  const [selectedVocabulary, setSelectedVocabulary] = useState([])\r\n  const [isGeneratingVocabulary, setIsGeneratingVocabulary] = useState(false)\r\n  \r\n  // 문제 생성 관련 상태\r\n  const [showQuestionPanel, setShowQuestionPanel] = useState(false)\r\n  const [questionData, setQuestionData] = useState(null)\r\n  const [selectedQuestions, setSelectedQuestions] = useState([])\r\n  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false)\r\n  \r\n  // 페이지 관리 상태\r\n  const [currentPage, setCurrentPage] = useState('main')\r\n  const [pages, setPages] = useState({\r\n    main: [],\r\n    vocabulary: [],\r\n    questions: [],\r\n    answers: []\r\n  })\r\n  \r\n  // 해설 생성 관련 상태\r\n  const [isGeneratingAnswers, setIsGeneratingAnswers] = useState(false)\r\n  const [answerData, setAnswerData] = useState(null)\r\n\r\n  // A4 dimensions in pixels (96 DPI)\r\n  const A4_WIDTH = 794\r\n  const A4_HEIGHT = 1123\r\n\r\n  const handleZoomIn = () => setZoom(prev => Math.min(200, prev + 10))\r\n  const handleZoomOut = () => setZoom(prev => Math.max(50, prev - 10))\r\n  const handleZoomFit = () => setZoom(100)\r\n\r\n  // 블록 관리 함수들\r\n  const generateBlockId = () => Date.now().toString(36) + Math.random().toString(36).substr(2)\r\n\r\n  const addTextBlock = () => {\r\n    const newBlock = {\r\n      id: generateBlockId(),\r\n      type: 'text',\r\n      x: 50 + Math.random() * 100,\r\n      y: 50 + Math.random() * 100,\r\n      width: 200,\r\n      height: 80,\r\n      text: '새 텍스트 블록',\r\n      fontSize: 16,\r\n      fontFamily: 'Noto Sans KR',\r\n      color: '#333333'\r\n    }\r\n    setBlocks(prev => [...prev, newBlock])\r\n    setSelectedBlockId(newBlock.id)\r\n  }\r\n\r\n  const updateBlock = (id, updates) => {\r\n    setBlocks(prev => prev.map(block => \r\n      block.id === id ? { ...block, ...updates } : block\r\n    ))\r\n  }\r\n\r\n  const deleteBlock = (id) => {\r\n    setBlocks(prev => prev.filter(block => block.id !== id))\r\n    if (selectedBlockId === id) {\r\n      setSelectedBlockId(null)\r\n    }\r\n  }\r\n\r\n  const selectBlock = (id) => {\r\n    setSelectedBlockId(id)\r\n  }\r\n\r\n  const handleCanvasClick = (e) => {\r\n    if (e.target === e.currentTarget) {\r\n      setSelectedBlockId(null)\r\n    }\r\n  }\r\n\r\n  const handleToolClick = (toolId) => {\r\n    setSelectedTool(toolId)\r\n    if (toolId === 'text') {\r\n      addTextBlock()\r\n    }\r\n  }\r\n\r\n  const addGeneratedContentToPage = () => {\r\n    if (!generatedContent) return\r\n\r\n    let yOffset = 50\r\n    const blockSpacing = 120\r\n\r\n    // 제목 블록 추가\r\n    if (generatedContent.title) {\r\n      const titleBlock = {\r\n        id: generateBlockId(),\r\n        type: 'text',\r\n        x: 50,\r\n        y: yOffset,\r\n        width: 500,\r\n        height: 60,\r\n        text: generatedContent.title,\r\n        fontSize: 24,\r\n        fontFamily: 'Noto Sans KR',\r\n        color: '#1f2937'\r\n      }\r\n      setBlocks(prev => [...prev, titleBlock])\r\n      yOffset += blockSpacing\r\n    }\r\n\r\n    // 설명 블록 추가\r\n    if (generatedContent.description) {\r\n      const descBlock = {\r\n        id: generateBlockId(),\r\n        type: 'text',\r\n        x: 50,\r\n        y: yOffset,\r\n        width: 500,\r\n        height: 80,\r\n        text: generatedContent.description,\r\n        fontSize: 14,\r\n        fontFamily: 'Noto Sans KR',\r\n        color: '#6b7280'\r\n      }\r\n      setBlocks(prev => [...prev, descBlock])\r\n      yOffset += blockSpacing\r\n    }\r\n\r\n    // 주요 내용 블록 추가\r\n    if (generatedContent.mainContent) {\r\n      const { introduction, keyPoints, examples } = generatedContent.mainContent\r\n\r\n      if (introduction) {\r\n        const introBlock = {\r\n          id: generateBlockId(),\r\n          type: 'text',\r\n          x: 50,\r\n          y: yOffset,\r\n          width: 500,\r\n          height: 100,\r\n          text: introduction,\r\n          fontSize: 16,\r\n          fontFamily: 'Noto Sans KR',\r\n          color: '#374151'\r\n        }\r\n        setBlocks(prev => [...prev, introBlock])\r\n        yOffset += blockSpacing\r\n      }\r\n\r\n      if (keyPoints && keyPoints.length > 0) {\r\n        const keyPointsText = \"주요 포인트:\\n\" + keyPoints.map((point, idx) => `${idx + 1}. ${point}`).join('\\n')\r\n        const keyPointsBlock = {\r\n          id: generateBlockId(),\r\n          type: 'text',\r\n          x: 50,\r\n          y: yOffset,\r\n          width: 500,\r\n          height: Math.max(100, keyPoints.length * 25 + 40),\r\n          text: keyPointsText,\r\n          fontSize: 14,\r\n          fontFamily: 'Noto Sans KR',\r\n          color: '#374151'\r\n        }\r\n        setBlocks(prev => [...prev, keyPointsBlock])\r\n        yOffset += Math.max(blockSpacing, keyPoints.length * 25 + 60)\r\n      }\r\n\r\n      if (examples && examples.length > 0) {\r\n        examples.forEach((example, idx) => {\r\n          const exampleText = `예시 ${idx + 1}:\\n${example.korean}${example.english ? `\\n(${example.english})` : ''}${example.explanation ? `\\n→ ${example.explanation}` : ''}`\r\n          const exampleBlock = {\r\n            id: generateBlockId(),\r\n            type: 'text',\r\n            x: 50,\r\n            y: yOffset,\r\n            width: 500,\r\n            height: 100,\r\n            text: exampleText,\r\n            fontSize: 14,\r\n            fontFamily: 'Noto Sans KR',\r\n            color: '#059669'\r\n          }\r\n          setBlocks(prev => [...prev, exampleBlock])\r\n          yOffset += blockSpacing\r\n        })\r\n      }\r\n    }\r\n\r\n    // AI 패널 닫기 및 선택 해제\r\n    setGeneratedContent(null)\r\n    setShowAiPanel(false)\r\n    setSelectedTool('select')\r\n  }\r\n\r\n  // 어휘 생성 함수\r\n  const handleGenerateVocabulary = async () => {\r\n    if (!generatedContent?.mainContent?.introduction) {\r\n      alert('먼저 지문을 생성해주세요.')\r\n      return\r\n    }\r\n\r\n    setIsGeneratingVocabulary(true)\r\n    try {\r\n      const aiService = (await import('../services/aiService.js')).default\r\n      \r\n      const result = await aiService.generateContent({\r\n        provider: aiProvider,\r\n        contentType: 'vocabulary',\r\n        difficulty,\r\n        targetAge,\r\n        prompt: `다음 지문에서 ${ageGuides[targetAge]}이 모를만한 어려운 어휘 3-5개를 추출하고 분석해주세요:\r\n        \r\n        ${generatedContent.mainContent.introduction}\r\n        \r\n        각 어휘에 대해:\r\n        1. 한자어 기반으로 쉽게 풀이\r\n        2. 유의어와 반의어 제시\r\n        3. 난이도를 별표(★) 1-5개로 표시 (5개가 가장 어려움)\r\n        4. 반드시 어려운 어휘만 포함`\r\n      })\r\n      \r\n      setVocabularyData(result.content)\r\n      setShowVocabularyPanel(true)\r\n      \r\n    } catch (error) {\r\n      console.error('어휘 생성 실패:', error)\r\n      alert(`어휘 생성에 실패했습니다: ${error.message}`)\r\n    } finally {\r\n      setIsGeneratingVocabulary(false)\r\n    }\r\n  }\r\n\r\n  // 문제 생성 함수\r\n  const handleGenerateQuestions = async () => {\r\n    if (!generatedContent?.mainContent?.introduction) {\r\n      alert('먼저 지문을 생성해주세요.')\r\n      return\r\n    }\r\n\r\n    setIsGeneratingQuestions(true)\r\n    try {\r\n      const aiService = (await import('../services/aiService.js')).default\r\n      \r\n      const result = await aiService.generateContent({\r\n        provider: aiProvider,\r\n        contentType: 'questions',\r\n        difficulty,\r\n        targetAge,\r\n        prompt: `다음 지문을 바탕으로 ${ageGuides[targetAge]} 수준의 서술형 문제 6문제를 만들어주세요:\r\n        \r\n        ${generatedContent.mainContent.introduction}\r\n        \r\n        문제 유형:\r\n        - 맥락 추론형 3문제\r\n        - 내용 이해형 3문제\r\n        \r\n        각 문제는 해당 학년 수준에 맞는 난이도로 작성해주세요.`\r\n      })\r\n      \r\n      setQuestionData(result.content)\r\n      setShowQuestionPanel(true)\r\n      \r\n    } catch (error) {\r\n      console.error('문제 생성 실패:', error)\r\n      alert(`문제 생성에 실패했습니다: ${error.message}`)\r\n    } finally {\r\n      setIsGeneratingQuestions(false)\r\n    }\r\n  }\r\n\r\n  // 연령 가이드 매핑\r\n  const ageGuides = {\r\n    elem1: '초등학교 1학년',\r\n    elem2: '초등학교 2학년', \r\n    elem3: '초등학교 3학년',\r\n    elem4: '초등학교 4학년',\r\n    elem5: '초등학교 5학년',\r\n    elem6: '초등학교 6학년',\r\n    middle1: '중학교 1학년',\r\n    middle2: '중학교 2학년',\r\n    middle3: '중학교 3학년',\r\n    high1: '고등학교 1학년',\r\n    high2: '고등학교 2학년',\r\n    high3: '고등학교 3학년'\r\n  }\r\n\r\n  // 해설 생성 함수\r\n  const handleGenerateAnswers = async () => {\r\n    if (!questionData?.questions || selectedQuestions.length === 0) {\r\n      alert('먼저 문제를 선택해주세요.')\r\n      return\r\n    }\r\n\r\n    setIsGeneratingAnswers(true)\r\n    try {\r\n      const aiService = (await import('../services/aiService.js')).default\r\n      \r\n      const selectedQuestionsList = selectedQuestions.map(index => questionData.questions[index])\r\n      \r\n      const result = await aiService.generateContent({\r\n        provider: aiProvider,\r\n        contentType: 'answers',\r\n        difficulty,\r\n        targetAge,\r\n        prompt: `다음 문제들에 대한 상세한 해설을 작성해주세요. ${ageGuides[targetAge]} 수준에 맞게 설명해주세요:\r\n        \r\n        ${selectedQuestionsList.map((q, idx) => `\r\n        문제 ${idx + 1}: ${q.question}\r\n        유형: ${q.type}\r\n        `).join('\\n')}\r\n        \r\n        각 문제에 대해:\r\n        1. 정답 또는 예시 답안\r\n        2. 해설 (왜 그런 답이 나오는지 단계별 설명)\r\n        3. 채점 기준\r\n        4. 유사 문제 해결 팁`\r\n      })\r\n      \r\n      setAnswerData(result.content)\r\n      \r\n    } catch (error) {\r\n      console.error('해설 생성 실패:', error)\r\n      alert(`해설 생성에 실패했습니다: ${error.message}`)\r\n    } finally {\r\n      setIsGeneratingAnswers(false)\r\n    }\r\n  }\r\n\r\n  // 페이지 전환 함수\r\n  const switchPage = (pageType) => {\r\n    // 현재 페이지의 블록들을 저장\r\n    setPages(prev => ({\r\n      ...prev,\r\n      [currentPage]: blocks\r\n    }))\r\n    \r\n    // 새 페이지로 전환\r\n    setCurrentPage(pageType)\r\n    setBlocks(pages[pageType] || [])\r\n    setSelectedBlockId(null)\r\n  }\r\n\r\n  const handleGenerateContent = async () => {\r\n    if (!aiPrompt.trim()) return\r\n    \r\n    setIsGenerating(true)\r\n    try {\r\n      // AI 서비스 import\r\n      const aiService = (await import('../services/aiService.js')).default\r\n      \r\n      const result = await aiService.generateContent({\r\n        provider: aiProvider,\r\n        contentType,\r\n        difficulty,\r\n        targetAge,\r\n        contentLength,\r\n        prompt: aiPrompt\r\n      })\r\n      \r\n      setGeneratedContent(result.content)\r\n      console.log('생성된 콘텐츠:', result)\r\n      \r\n      // 성공 후 UI 업데이트\r\n      setAiPrompt('')\r\n      // AI 패널은 열어두어서 결과를 볼 수 있게 함\r\n      \r\n    } catch (error) {\r\n      console.error('AI 생성 실패:', error)\r\n      alert(`AI 생성에 실패했습니다: ${error.message}`)\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }\r\n\r\n  const handleExportPDF = async () => {\r\n    try {\r\n      // 현재 페이지의 블록들을 pages에 저장\r\n      const allPages = {\r\n        ...pages,\r\n        [currentPage]: blocks\r\n      }\r\n      \r\n      // 내용이 있는 페이지들만 필터링\r\n      const pagesWithContent = Object.entries(allPages)\r\n        .filter(([_, pageBlocks]) => pageBlocks.length > 0)\r\n        .map(([pageType, pageBlocks]) => ({\r\n          title: pageType === 'main' ? '지문' : pageType === 'vocabulary' ? '어휘' : pageType === 'questions' ? '문제' : '해설',\r\n          blocks: pageBlocks\r\n        }))\r\n      \r\n      if (pagesWithContent.length === 0) {\r\n        alert('내보낼 내용이 없습니다.')\r\n        return\r\n      }\r\n      \r\n      // 클라이언트 사이드 PDF 서비스 사용\r\n      const PDFService = (await import('../services/pdfService.js')).default\r\n      const pdfService = new PDFService()\r\n      \r\n      const success = pdfService.openPDFPreview('한국어 학습 자료', pagesWithContent)\r\n      \r\n      if (!success) {\r\n        throw new Error('PDF 생성에 실패했습니다')\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('PDF 내보내기 실패:', error)\r\n      alert(`PDF 내보내기에 실패했습니다: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col bg-gray-100\">\r\n      {/* Top Toolbar */}\r\n      <header className=\"bg-white border-b border-gray-300 px-4 py-2 flex items-center justify-between\">\r\n        {/* Left Section */}\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button\r\n            onClick={() => navigate('/')}\r\n            className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\r\n          >\r\n            <Home className=\"w-5 h-5\" />\r\n            <span className=\"text-sm font-medium\">홈으로</span>\r\n          </button>\r\n          \r\n          <div className=\"w-px h-6 bg-gray-300\" />\r\n          \r\n          <div className=\"flex items-center space-x-2\">\r\n            <button className=\"p-2 rounded hover:bg-gray-100 text-gray-600\">\r\n              <Save className=\"w-4 h-4\" />\r\n            </button>\r\n            <button className=\"p-2 rounded hover:bg-gray-100 text-gray-600\">\r\n              <Undo className=\"w-4 h-4\" />\r\n            </button>\r\n            <button className=\"p-2 rounded hover:bg-gray-100 text-gray-600\">\r\n              <Redo className=\"w-4 h-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Center Section - Page Navigation */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\r\n            {[\r\n              { id: 'main', label: '지문', icon: '📄' },\r\n              { id: 'vocabulary', label: '어휘', icon: '📚' },\r\n              { id: 'questions', label: '문제', icon: '❓' },\r\n              { id: 'answers', label: '해설', icon: '💡' }\r\n            ].map((page) => (\r\n              <button\r\n                key={page.id}\r\n                onClick={() => switchPage(page.id)}\r\n                className={`\r\n                  px-3 py-1 rounded text-sm font-medium transition-colors flex items-center space-x-1\r\n                  ${currentPage === page.id\r\n                    ? 'bg-white text-blue-600 shadow-sm'\r\n                    : 'text-gray-600 hover:text-gray-900'\r\n                  }\r\n                `}\r\n              >\r\n                <span>{page.icon}</span>\r\n                <span>{page.label}</span>\r\n                {pages[page.id]?.length > 0 && (\r\n                  <span className=\"ml-1 bg-blue-100 text-blue-600 text-xs px-1 rounded\">\r\n                    {pages[page.id].length}\r\n                  </span>\r\n                )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <span className=\"px-2 py-1 bg-green-100 text-green-700 text-xs rounded\">저장됨</span>\r\n        </div>\r\n\r\n        {/* Right Section */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\r\n            <button\r\n              onClick={handleZoomOut}\r\n              className=\"p-1 rounded hover:bg-white\"\r\n            >\r\n              <ZoomOut className=\"w-4 h-4\" />\r\n            </button>\r\n            <span className=\"text-sm text-gray-600 min-w-12 text-center\">\r\n              {zoom}%\r\n            </span>\r\n            <button\r\n              onClick={handleZoomIn}\r\n              className=\"p-1 rounded hover:bg-white\"\r\n            >\r\n              <ZoomIn className=\"w-4 h-4\" />\r\n            </button>\r\n          </div>\r\n          \r\n          <button\r\n            onClick={() => setShowGrid(!showGrid)}\r\n            className={`p-2 rounded ${showGrid ? 'bg-blue-100 text-blue-600' : 'hover:bg-gray-100 text-gray-600'}`}\r\n          >\r\n            <Grid className=\"w-4 h-4\" />\r\n          </button>\r\n          \r\n          <button \r\n            onClick={handleExportPDF}\r\n            className=\"px-4 py-2 rounded-lg transition-colors flex items-center space-x-2 bg-blue-600 text-white hover:bg-blue-700\"\r\n          >\r\n            <Download className=\"w-4 h-4\" />\r\n            <span>PDF 내보내기</span>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"flex-1 flex\">\r\n        {/* Left Sidebar - Tools */}\r\n        <div className=\"w-16 bg-white border-r border-gray-300 flex flex-col items-center py-4 space-y-2\">\r\n          {[\r\n            { id: 'select', icon: '🔘', label: '선택' },\r\n            { id: 'text', icon: <Type className=\"w-5 h-5\" />, label: '텍스트' },\r\n            { id: 'image', icon: <Image className=\"w-5 h-5\" />, label: '이미지' },\r\n            { id: 'table', icon: <Table className=\"w-5 h-5\" />, label: '표' },\r\n            { id: 'quiz', icon: <HelpCircle className=\"w-5 h-5\" />, label: '퀴즈' },\r\n          ].map((tool) => (\r\n            <button\r\n              key={tool.id}\r\n              onClick={() => handleToolClick(tool.id)}\r\n              className={`\r\n                w-12 h-12 rounded-lg flex items-center justify-center transition-colors\r\n                ${selectedTool === tool.id \r\n                  ? 'bg-blue-100 text-blue-600 border-2 border-blue-300' \r\n                  : 'hover:bg-gray-100 text-gray-600'\r\n                }\r\n              `}\r\n              title={tool.label}\r\n            >\r\n              {typeof tool.icon === 'string' ? (\r\n                <span className=\"text-lg\">{tool.icon}</span>\r\n              ) : (\r\n                tool.icon\r\n              )}\r\n            </button>\r\n          ))}\r\n          \r\n          <div className=\"h-px w-8 bg-gray-300 my-2\" />\r\n          \r\n          {/* AI Tools */}\r\n          <button\r\n            onClick={() => setShowAiPanel(!showAiPanel)}\r\n            className={`\r\n              w-12 h-12 rounded-lg flex items-center justify-center transition-colors\r\n              ${showAiPanel \r\n                ? 'bg-purple-100 text-purple-600 border-2 border-purple-300' \r\n                : 'hover:bg-gray-100 text-gray-600'\r\n              }\r\n            `}\r\n            title=\"AI 생성\"\r\n          >\r\n            <Sparkles className=\"w-5 h-5\" />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Main Editor Area */}\r\n        <div className=\"flex-1 relative overflow-auto\">\r\n          {/* Canvas */}\r\n          <div \r\n            className=\"min-h-full flex items-center justify-center p-8\"\r\n            style={{ \r\n              backgroundColor: '#f8f9fa',\r\n              backgroundImage: showGrid ? \r\n                'radial-gradient(circle, #e9ecef 1px, transparent 1px)' : 'none',\r\n              backgroundSize: showGrid ? '20px 20px' : 'auto'\r\n            }}\r\n          >\r\n            {/* A4 Page */}\r\n            <div\r\n              className=\"bg-white shadow-lg relative overflow-hidden\"\r\n              style={{\r\n                width: `${A4_WIDTH * (zoom / 100)}px`,\r\n                height: `${A4_HEIGHT * (zoom / 100)}px`,\r\n                transform: `scale(1)`,\r\n                transformOrigin: 'center center'\r\n              }}\r\n              onClick={handleCanvasClick}\r\n            >\r\n              {/* Page Content Area */}\r\n              <div \r\n                className=\"absolute inset-4 border border-dashed border-gray-300 rounded\"\r\n                style={{ transform: `scale(${zoom / 100})`, transformOrigin: 'top left' }}\r\n              >\r\n                {/* Render Blocks */}\r\n                {blocks.map(block => {\r\n                  if (block.type === 'text') {\r\n                    return (\r\n                      <TextBlock\r\n                        key={block.id}\r\n                        id={block.id}\r\n                        x={block.x}\r\n                        y={block.y}\r\n                        width={block.width}\r\n                        height={block.height}\r\n                        text={block.text}\r\n                        fontSize={block.fontSize}\r\n                        fontFamily={block.fontFamily}\r\n                        color={block.color}\r\n                        isSelected={selectedBlockId === block.id}\r\n                        onSelect={selectBlock}\r\n                        onUpdate={updateBlock}\r\n                        onDelete={deleteBlock}\r\n                      />\r\n                    )\r\n                  }\r\n                  return null\r\n                })}\r\n\r\n                {/* Welcome Message when no blocks */}\r\n                {blocks.length === 0 && (\r\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                    <div className=\"text-center text-gray-400\">\r\n                      <Type className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\r\n                      <p className=\"text-lg mb-2\">\r\n                        빈 {currentPage === 'main' ? '지문' : currentPage === 'vocabulary' ? '어휘' : currentPage === 'questions' ? '문제' : '해설'} 페이지\r\n                      </p>\r\n                      <p className=\"text-sm\">\r\n                        {currentPage === 'main' \r\n                          ? '좌측 도구에서 텍스트 블록을 선택하거나 AI 도구로 지문을 생성하세요'\r\n                          : currentPage === 'vocabulary'\r\n                          ? '먼저 지문을 생성한 후 어휘 페이지를 생성하세요'\r\n                          : currentPage === 'questions'\r\n                          ? '먼저 지문을 생성한 후 문제를 생성하세요'\r\n                          : '먼저 문제를 생성한 후 해설을 생성하세요'\r\n                        }\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Page Info */}\r\n              <div className=\"absolute bottom-2 right-2 text-xs text-gray-400\">\r\n                A4 (210mm × 297mm) - {currentPage} 페이지 - {blocks.length}개 블록\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Sidebar - Properties/AI/Vocabulary/Questions */}\r\n        <div className=\"w-80 bg-white border-l border-gray-300\">\r\n          {showVocabularyPanel ? (\r\n            /* Vocabulary Panel */\r\n            <div className=\"h-full flex flex-col\">\r\n              <div className=\"p-4 border-b border-gray-200\">\r\n                <div className=\"flex items-center justify-between mb-3\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-800\">어휘 선택</h3>\r\n                  <button\r\n                    onClick={() => setShowVocabularyPanel(false)}\r\n                    className=\"text-gray-400 hover:text-gray-600\"\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </div>\r\n                <p className=\"text-sm text-gray-600\">어휘를 선택하여 페이지에 추가하세요</p>\r\n              </div>\r\n\r\n              <div className=\"flex-1 p-4 overflow-y-auto\">\r\n                {vocabularyData?.vocabularyList?.map((vocab, index) => (\r\n                  <div key={index} className=\"mb-4 p-3 border border-gray-200 rounded-lg\">\r\n                    <div className=\"flex items-start justify-between mb-2\">\r\n                      <h4 className=\"font-semibold text-gray-900\">{vocab.word}</h4>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedVocabulary.includes(index)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            setSelectedVocabulary([...selectedVocabulary, index])\r\n                          } else {\r\n                            setSelectedVocabulary(selectedVocabulary.filter(i => i !== index))\r\n                          }\r\n                        }}\r\n                        className=\"ml-2\"\r\n                      />\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-700 mb-2\">{vocab.meaning}</p>\r\n                    <div className=\"text-xs text-gray-600 mb-1\">\r\n                      <span className=\"font-medium\">유의어:</span> {vocab.synonyms?.join(', ') || '없음'}\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-600 mb-1\">\r\n                      <span className=\"font-medium\">반의어:</span> {vocab.antonyms?.join(', ') || '없음'}\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-600 mb-1\">\r\n                      <span className=\"font-medium\">난이도:</span> {vocab.difficulty}\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500\">\r\n                      <span className=\"font-medium\">예문:</span> {vocab.example}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n\r\n                {/* 사용자 직접 추가 */}\r\n                <div className=\"mt-4 p-3 border-2 border-dashed border-gray-300 rounded-lg\">\r\n                  <button className=\"w-full text-center text-gray-600 hover:text-gray-800\">\r\n                    + 사용자 직접 추가\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"p-4 border-t border-gray-200\">\r\n                <button\r\n                  onClick={() => {\r\n                    // 선택된 어휘들을 페이지에 추가하는 로직\r\n                    console.log('선택된 어휘:', selectedVocabulary)\r\n                    setShowVocabularyPanel(false)\r\n                  }}\r\n                  disabled={selectedVocabulary.length === 0}\r\n                  className=\"w-full bg-orange-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-orange-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                >\r\n                  선택한 어휘 페이지 추가 ({selectedVocabulary.length}개)\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : showQuestionPanel ? (\r\n            /* Questions Panel */\r\n            <div className=\"h-full flex flex-col\">\r\n              <div className=\"p-4 border-b border-gray-200\">\r\n                <div className=\"flex items-center justify-between mb-3\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-800\">문제 선택</h3>\r\n                  <button\r\n                    onClick={() => setShowQuestionPanel(false)}\r\n                    className=\"text-gray-400 hover:text-gray-600\"\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </div>\r\n                <p className=\"text-sm text-gray-600\">문제를 선택하여 페이지에 추가하세요</p>\r\n              </div>\r\n\r\n              <div className=\"flex-1 p-4 overflow-y-auto\">\r\n                {questionData?.questions?.map((question, index) => (\r\n                  <div key={index} className=\"mb-4 p-3 border border-gray-200 rounded-lg\">\r\n                    <div className=\"flex items-start justify-between mb-2\">\r\n                      <div className=\"flex-1\">\r\n                        <span className=\"inline-block px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded mb-2\">\r\n                          {question.type}\r\n                        </span>\r\n                        <p className=\"text-sm text-gray-900\">{question.question}</p>\r\n                      </div>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedQuestions.includes(index)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            setSelectedQuestions([...selectedQuestions, index])\r\n                          } else {\r\n                            setSelectedQuestions(selectedQuestions.filter(i => i !== index))\r\n                          }\r\n                        }}\r\n                        className=\"ml-2\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500\">\r\n                      답안 줄 수: {question.answerSpace}줄 | 배점: {question.points}점\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"p-4 border-t border-gray-200\">\r\n                <div className=\"space-y-2\">\r\n                  <button\r\n                    onClick={() => {\r\n                      // 선택된 문제들을 페이지에 추가하는 로직\r\n                      console.log('선택된 문제:', selectedQuestions)\r\n                      setShowQuestionPanel(false)\r\n                    }}\r\n                    disabled={selectedQuestions.length === 0}\r\n                    className=\"w-full bg-teal-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-teal-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                  >\r\n                    선택한 문제 페이지 추가 ({selectedQuestions.length}개)\r\n                  </button>\r\n                  \r\n                  <button\r\n                    onClick={handleGenerateAnswers}\r\n                    disabled={selectedQuestions.length === 0 || isGeneratingAnswers}\r\n                    className=\"w-full bg-purple-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                  >\r\n                    {isGeneratingAnswers ? '해설 생성 중...' : '해설 추가'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : showAiPanel ? (\r\n            /* AI Panel */\r\n            <div className=\"h-full flex flex-col\">\r\n              <div className=\"p-4 border-b border-gray-200\">\r\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">AI 콘텐츠 생성</h3>\r\n                \r\n                {/* AI Provider Selection */}\r\n                <div className=\"mb-4\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    AI 제공업체\r\n                  </label>\r\n                  <div className=\"flex space-x-2\">\r\n                    <button\r\n                      onClick={() => setAiProvider('gemini')}\r\n                      className={`\r\n                        flex-1 px-3 py-2 rounded-lg text-sm font-medium transition-colors\r\n                        ${aiProvider === 'gemini'\r\n                          ? 'bg-blue-100 text-blue-700 border-2 border-blue-300'\r\n                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                        }\r\n                      `}\r\n                    >\r\n                      Gemini\r\n                    </button>\r\n                    <button\r\n                      onClick={() => setAiProvider('claude')}\r\n                      className={`\r\n                        flex-1 px-3 py-2 rounded-lg text-sm font-medium transition-colors\r\n                        ${aiProvider === 'claude'\r\n                          ? 'bg-purple-100 text-purple-700 border-2 border-purple-300'\r\n                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                        }\r\n                      `}\r\n                    >\r\n                      Claude\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Content Type */}\r\n                <div className=\"mb-4\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    콘텐츠 유형\r\n                  </label>\r\n                  <select \r\n                    value={contentType}\r\n                    onChange={(e) => setContentType(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"reading\">지문 생성</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Difficulty Level */}\r\n                <div className=\"mb-4\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    난이도\r\n                  </label>\r\n                  <select \r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"beginner\">초급</option>\r\n                    <option value=\"intermediate\">중급</option>\r\n                    <option value=\"advanced\">고급</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Target Age */}\r\n                <div className=\"mb-4\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    대상 연령\r\n                  </label>\r\n                  <select \r\n                    value={targetAge}\r\n                    onChange={(e) => setTargetAge(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"elem1\">초등학교 1학년</option>\r\n                    <option value=\"elem2\">초등학교 2학년</option>\r\n                    <option value=\"elem3\">초등학교 3학년</option>\r\n                    <option value=\"elem4\">초등학교 4학년</option>\r\n                    <option value=\"elem5\">초등학교 5학년</option>\r\n                    <option value=\"elem6\">초등학교 6학년</option>\r\n                    <option value=\"middle1\">중학교 1학년</option>\r\n                    <option value=\"middle2\">중학교 2학년</option>\r\n                    <option value=\"middle3\">중학교 3학년</option>\r\n                    <option value=\"high1\">고등학교 1학년</option>\r\n                    <option value=\"high2\">고등학교 2학년</option>\r\n                    <option value=\"high3\">고등학교 3학년</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Content Length */}\r\n                <div className=\"mb-4\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    글의 길이\r\n                  </label>\r\n                  <select \r\n                    value={contentLength}\r\n                    onChange={(e) => setContentLength(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"400\">400자</option>\r\n                    <option value=\"800\">800자</option>\r\n                    <option value=\"1200\">1200자</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Prompt Input */}\r\n              <div className=\"flex-1 p-4 flex flex-col\">\r\n                {!generatedContent ? (\r\n                  <>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      생성할 내용 설명\r\n                    </label>\r\n                    <textarea\r\n                      value={aiPrompt}\r\n                      onChange={(e) => setAiPrompt(e.target.value)}\r\n                      placeholder=\"예: 한국어 인사말에 대한 학습 자료를 만들어주세요. 존댓말과 반말의 차이를 포함해서...\"\r\n                      className=\"flex-1 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                    />\r\n                    \r\n                    <button\r\n                      onClick={handleGenerateContent}\r\n                      disabled={isGenerating || !aiPrompt.trim()}\r\n                      className={`\r\n                        mt-4 w-full py-3 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2\r\n                        ${isGenerating || !aiPrompt.trim()\r\n                          ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                          : aiProvider === 'gemini'\r\n                            ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                            : 'bg-purple-600 text-white hover:bg-purple-700'\r\n                        }\r\n                      `}\r\n                    >\r\n                      {isGenerating ? (\r\n                        <>\r\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></div>\r\n                          <span>생성 중...</span>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <Sparkles className=\"w-4 h-4\" />\r\n                          <span>{aiProvider === 'gemini' ? 'Gemini로' : 'Claude로'} 생성</span>\r\n                        </>\r\n                      )}\r\n                    </button>\r\n                  </>\r\n                ) : (\r\n                  /* Generated Content Display */\r\n                  <div className=\"flex-1 flex flex-col\">\r\n                    <div className=\"flex items-center justify-between mb-3\">\r\n                      <h4 className=\"text-sm font-medium text-gray-700\">생성된 콘텐츠</h4>\r\n                      <button\r\n                        onClick={() => setGeneratedContent(null)}\r\n                        className=\"text-gray-400 hover:text-gray-600\"\r\n                      >\r\n                        <span className=\"text-sm\">새로 생성</span>\r\n                      </button>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex-1 overflow-y-auto bg-gray-50 rounded-lg p-4 text-sm\">\r\n                      <div className=\"mb-4\">\r\n                        <h5 className=\"font-semibold text-gray-900 mb-2\">\r\n                          {generatedContent?.title || '제목 없음'}\r\n                        </h5>\r\n                        <p className=\"text-gray-600 text-xs mb-3\">\r\n                          {generatedContent?.description}\r\n                        </p>\r\n                      </div>\r\n\r\n                      {generatedContent?.mainContent && (\r\n                        <div className=\"mb-4\">\r\n                          {generatedContent.mainContent.introduction && (\r\n                            <p className=\"text-gray-700 mb-3\">\r\n                              {generatedContent.mainContent.introduction}\r\n                            </p>\r\n                          )}\r\n\r\n                          {generatedContent.mainContent.keyPoints && (\r\n                            <div className=\"mb-3\">\r\n                              <h6 className=\"font-medium text-gray-800 mb-2\">주요 포인트:</h6>\r\n                              <ul className=\"list-disc list-inside space-y-1\">\r\n                                {generatedContent.mainContent.keyPoints.map((point, idx) => (\r\n                                  <li key={idx} className=\"text-gray-700\">{point}</li>\r\n                                ))}\r\n                              </ul>\r\n                            </div>\r\n                          )}\r\n\r\n                          {generatedContent.mainContent.examples && (\r\n                            <div className=\"mb-3\">\r\n                              <h6 className=\"font-medium text-gray-800 mb-2\">예시:</h6>\r\n                              <div className=\"space-y-2\">\r\n                                {generatedContent.mainContent.examples.map((example, idx) => (\r\n                                  <div key={idx} className=\"bg-white p-2 rounded border\">\r\n                                    <p className=\"font-medium\">{example.korean}</p>\r\n                                    {example.english && <p className=\"text-gray-600 text-xs\">{example.english}</p>}\r\n                                    {example.explanation && <p className=\"text-gray-500 text-xs mt-1\">{example.explanation}</p>}\r\n                                  </div>\r\n                                ))}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n\r\n                      {generatedContent?.exercises && generatedContent.exercises.length > 0 && (\r\n                        <div className=\"mb-4\">\r\n                          <h6 className=\"font-medium text-gray-800 mb-2\">연습 문제:</h6>\r\n                          <div className=\"space-y-2\">\r\n                            {generatedContent.exercises.map((exercise, idx) => (\r\n                              <div key={idx} className=\"bg-white p-2 rounded border\">\r\n                                <p className=\"font-medium mb-1\">{exercise.question}</p>\r\n                                {exercise.options && (\r\n                                  <div className=\"text-xs space-y-1\">\r\n                                    {exercise.options.map((option, optIdx) => (\r\n                                      <div key={optIdx} className={`\r\n                                        ${optIdx === exercise.correctAnswer ? 'text-green-600 font-medium' : 'text-gray-600'}\r\n                                      `}>\r\n                                        {optIdx + 1}. {option}\r\n                                      </div>\r\n                                    ))}\r\n                                  </div>\r\n                                )}\r\n                                {exercise.explanation && (\r\n                                  <p className=\"text-gray-500 text-xs mt-1\">{exercise.explanation}</p>\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"mt-3 flex space-x-2\">\r\n                      <button \r\n                        onClick={addGeneratedContentToPage}\r\n                        className=\"flex-1 bg-green-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-green-700 transition-colors\"\r\n                      >\r\n                        페이지에 추가\r\n                      </button>\r\n                      <button \r\n                        onClick={() => setGeneratedContent(null)}\r\n                        className=\"flex-1 border border-gray-300 text-gray-700 py-2 px-3 rounded-lg text-sm hover:bg-gray-50 transition-colors\"\r\n                      >\r\n                        다시 생성\r\n                      </button>\r\n                    </div>\r\n\r\n                    {/* 지문 생성 후 추가 기능 버튼들 */}\r\n                    <div className=\"mt-4 space-y-2\">\r\n                      <button\r\n                        onClick={handleGenerateVocabulary}\r\n                        disabled={isGeneratingVocabulary}\r\n                        className=\"w-full bg-orange-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-orange-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                      >\r\n                        {isGeneratingVocabulary ? '어휘 생성 중...' : '어휘 페이지 생성'}\r\n                      </button>\r\n                      \r\n                      <button\r\n                        onClick={handleGenerateQuestions}\r\n                        disabled={isGeneratingQuestions}\r\n                        className=\"w-full bg-teal-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-teal-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                      >\r\n                        {isGeneratingQuestions ? '문제 생성 중...' : '문제 페이지 생성'}\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            /* Properties Panel */\r\n            <div className=\"h-full p-4\">\r\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">속성</h3>\r\n              <div className=\"text-gray-500 text-center py-8\">\r\n                블록을 선택하면 속성을 편집할 수 있습니다.\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Status Bar */}\r\n      <footer className=\"bg-white border-t border-gray-300 px-4 py-2 flex items-center justify-between text-sm text-gray-600\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <span>선택된 도구: {selectedTool}</span>\r\n          <span>줌: {zoom}%</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <span>A4 (210 × 297mm)</span>\r\n          <span>원바이트 Print 모드</span>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}","// 전역 상수 및 설정\r\nexport const CONSTANTS = Object.freeze({\r\n  // API 제공자\r\n  API_PROVIDERS: {\r\n    OPENAI: 'openai',\r\n    CLAUDE: 'claude',\r\n    GEMINI: 'gemini'\r\n  },\r\n\r\n  // 컨텐츠 타입\r\n  CONTENT_TYPES: {\r\n    READING: 'reading',\r\n    VOCABULARY: 'vocabulary',\r\n    GRAMMAR: 'grammar',\r\n    QUESTIONS: 'questions',\r\n    ANSWERS: 'answers'\r\n  },\r\n\r\n  // 난이도 레벨\r\n  DIFFICULTY_LEVELS: {\r\n    BEGINNER: 'beginner',\r\n    INTERMEDIATE: 'intermediate',\r\n    ADVANCED: 'advanced'\r\n  },\r\n\r\n  // 지문 길이 옵션\r\n  TEXT_LENGTH: {\r\n    SHORT: 400,\r\n    MEDIUM: 800,\r\n    LONG: 1200,\r\n    MIN: 200,\r\n    MAX: 2000\r\n  },\r\n\r\n  // 문제 개수 제한\r\n  PROBLEM_COUNT: {\r\n    VOCABULARY: {\r\n      MIN: 5,\r\n      DEFAULT: 10,\r\n      MAX: 20\r\n    },\r\n    READING: {\r\n      MIN: 3,\r\n      DEFAULT: 5,\r\n      MAX: 10\r\n    }\r\n  },\r\n\r\n  // 파일 업로드\r\n  FILE_UPLOAD: {\r\n    ACCEPTED_TYPES: ['.txt', '.docx', '.pdf'],\r\n    MAX_SIZE: 5 * 1024 * 1024, // 5MB\r\n    MIME_TYPES: {\r\n      TXT: 'text/plain',\r\n      DOCX: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      PDF: 'application/pdf'\r\n    }\r\n  },\r\n\r\n  // 에러 메시지\r\n  ERROR_MESSAGES: {\r\n    GENERIC: '오류가 발생했습니다. 다시 시도해주세요.',\r\n    NETWORK: '네트워크 연결을 확인해주세요.',\r\n    API_KEY: 'API 키가 설정되지 않았습니다.',\r\n    FILE_TYPE: '지원하지 않는 파일 형식입니다.',\r\n    FILE_SIZE: '파일 크기가 너무 큽니다. (최대 5MB)',\r\n    EMPTY_TEXT: '텍스트를 입력해주세요.',\r\n    MIN_LENGTH: '최소 200자 이상 입력해주세요.',\r\n    MAX_LENGTH: '최대 2000자까지 입력 가능합니다.'\r\n  },\r\n\r\n  // 성공 메시지\r\n  SUCCESS_MESSAGES: {\r\n    TEXT_GENERATED: '지문이 성공적으로 생성되었습니다.',\r\n    ANALYSIS_COMPLETE: '분석이 완료되었습니다.',\r\n    PROBLEMS_GENERATED: '문제가 성공적으로 생성되었습니다.',\r\n    PDF_CREATED: 'PDF가 생성되었습니다.'\r\n  },\r\n\r\n  // 로딩 메시지\r\n  LOADING_MESSAGES: {\r\n    GENERATING_TEXT: '지문을 생성하고 있습니다...',\r\n    ANALYZING: '문해력을 분석하고 있습니다...',\r\n    GENERATING_PROBLEMS: '문제를 생성하고 있습니다...',\r\n    PROCESSING_FILE: '파일을 처리하고 있습니다...'\r\n  }\r\n})\r\n\r\n// 주제 카테고리\r\nexport const TOPIC_CATEGORIES = Object.freeze([\r\n  { id: 'game', label: '🎮 게임 & 기술', keywords: ['게임', '인공지능', '로봇', '메타버스'] },\r\n  { id: 'sports', label: '⚽ 스포츠', keywords: ['축구', '야구', '올림픽', '스포츠 선수'] },\r\n  { id: 'music', label: '🎵 음악 & 엔터테인먼트', keywords: ['K-pop', '아이돌', '영화', '드라마'] },\r\n  { id: 'animal', label: '🐾 동물 & 자연', keywords: ['동물의 생태', '환경보호', '자연현상'] },\r\n  { id: 'science', label: '🚀 과학 & 우주', keywords: ['우주탐험', '과학실험', '발명품', '미래기술'] },\r\n  { id: 'food', label: '🍕 음식 & 요리', keywords: ['세계 음식', '요리법', '건강한 식단'] },\r\n  { id: 'art', label: '🎨 예술 & 창작', keywords: ['미술', '만화', '공예', '창작 활동'] },\r\n  { id: 'daily', label: '📱 일상 & 학교생활', keywords: ['친구 관계', '가족', '학교 이야기', '성장'] },\r\n  { id: 'custom', label: '📚 사용자 정의', keywords: [] }\r\n])\r\n\r\n// 학년 옵션\r\nexport const GRADE_OPTIONS = [\r\n  { value: 'elem1', label: '초등학교 1학년', age: 7 },\r\n  { value: 'elem2', label: '초등학교 2학년', age: 8 },\r\n  { value: 'elem3', label: '초등학교 3학년', age: 9 },\r\n  { value: 'elem4', label: '초등학교 4학년', age: 10 },\r\n  { value: 'elem5', label: '초등학교 5학년', age: 11 },\r\n  { value: 'elem6', label: '초등학교 6학년', age: 12 },\r\n  { value: 'middle1', label: '중학교 1학년', age: 13 },\r\n  { value: 'middle2', label: '중학교 2학년', age: 14 },\r\n  { value: 'middle3', label: '중학교 3학년', age: 15 }\r\n]\r\n\r\n// 지문 길이 옵션\r\nexport const LENGTH_OPTIONS = [\r\n  { value: '400', label: '기초 (400자)' },\r\n  { value: '800', label: '표준 (800자)' },\r\n  { value: '1200', label: '심화 (1200자)' },\r\n  { value: 'custom', label: '직접 입력' }\r\n]","import React from 'react'\r\nimport { AlertCircle, X } from 'lucide-react'\r\n\r\n/**\r\n * 에러 메시지 컴포넌트\r\n * @param {string} title - 에러 제목\r\n * @param {string} message - 에러 메시지\r\n * @param {function} onClose - 닫기 콜백\r\n * @param {string} type - 에러 타입 ('error', 'warning', 'info')\r\n */\r\nexport default function ErrorMessage({ \r\n  title = '오류', \r\n  message, \r\n  onClose, \r\n  type = 'error' \r\n}) {\r\n  const typeStyles = {\r\n    error: {\r\n      bg: 'bg-red-50',\r\n      border: 'border-red-400',\r\n      icon: 'text-red-600',\r\n      title: 'text-red-800',\r\n      message: 'text-red-700'\r\n    },\r\n    warning: {\r\n      bg: 'bg-yellow-50',\r\n      border: 'border-yellow-400',\r\n      icon: 'text-yellow-600',\r\n      title: 'text-yellow-800',\r\n      message: 'text-yellow-700'\r\n    },\r\n    info: {\r\n      bg: 'bg-blue-50',\r\n      border: 'border-blue-400',\r\n      icon: 'text-blue-600',\r\n      title: 'text-blue-800',\r\n      message: 'text-blue-700'\r\n    }\r\n  }\r\n\r\n  const styles = typeStyles[type]\r\n\r\n  return (\r\n    <div className={`${styles.bg} ${styles.border} border rounded-lg p-4 mb-4`}>\r\n      <div className=\"flex items-start\">\r\n        <AlertCircle className={`${styles.icon} h-5 w-5 mt-0.5 flex-shrink-0`} />\r\n        <div className=\"ml-3 flex-1\">\r\n          <h3 className={`text-sm font-medium ${styles.title}`}>\r\n            {title}\r\n          </h3>\r\n          {message && (\r\n            <p className={`mt-1 text-sm ${styles.message}`}>\r\n              {message}\r\n            </p>\r\n          )}\r\n        </div>\r\n        {onClose && (\r\n          <button\r\n            onClick={onClose}\r\n            className={`ml-3 -mr-1 -mt-1 ${styles.icon} hover:opacity-70 transition-opacity`}\r\n          >\r\n            <X className=\"h-5 w-5\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\n/**\r\n * 프로그레스 바 컴포넌트\r\n * @param {number} value - 현재 값 (0-100 또는 0-max)\r\n * @param {number} max - 최대 값 (기본값: 100)\r\n * @param {string} label - 라벨 텍스트\r\n * @param {boolean} showValue - 값 표시 여부\r\n * @param {string} color - 색상 ('blue', 'green', 'yellow', 'red', 'purple')\r\n * @param {string} size - 크기 ('small', 'medium', 'large')\r\n */\r\nexport default function ProgressBar({ \r\n  value = 0, \r\n  max = 100, \r\n  label, \r\n  showValue = true,\r\n  color = 'blue',\r\n  size = 'medium'\r\n}) {\r\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100))\r\n  \r\n  const colorClasses = {\r\n    blue: 'bg-blue-600',\r\n    green: 'bg-green-600',\r\n    yellow: 'bg-yellow-600',\r\n    red: 'bg-red-600',\r\n    purple: 'bg-purple-600'\r\n  }\r\n\r\n  const sizeClasses = {\r\n    small: 'h-1',\r\n    medium: 'h-2',\r\n    large: 'h-3'\r\n  }\r\n\r\n  const textSizeClasses = {\r\n    small: 'text-xs',\r\n    medium: 'text-sm',\r\n    large: 'text-base'\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      {(label || showValue) && (\r\n        <div className=\"flex justify-between mb-1\">\r\n          {label && (\r\n            <span className={`font-medium text-gray-700 ${textSizeClasses[size]}`}>\r\n              {label}\r\n            </span>\r\n          )}\r\n          {showValue && (\r\n            <span className={`text-gray-600 ${textSizeClasses[size]}`}>\r\n              {max === 100 ? `${Math.round(percentage)}%` : `${value}/${max}`}\r\n            </span>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div className=\"w-full bg-gray-200 rounded-full overflow-hidden\">\r\n        <div \r\n          className={`${colorClasses[color]} ${sizeClasses[size]} rounded-full transition-all duration-500 ease-out`}\r\n          style={{ width: `${percentage}%` }}\r\n          role=\"progressbar\"\r\n          aria-valuenow={value}\r\n          aria-valuemin={0}\r\n          aria-valuemax={max}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { memo } from 'react'\r\nimport ProgressBar from '../common/ProgressBar'\r\n\r\n/**\r\n * 문해력 분석 차트 컴포넌트 (메모이제이션)\r\n * @param {object} analysisResult - 분석 결과 데이터\r\n */\r\nconst AnalysisChart = memo(function AnalysisChart({ analysisResult }) {\r\n  if (!analysisResult) return null\r\n\r\n  const analysisItems = [\r\n    { label: '지문 길이', score: analysisResult.textLength },\r\n    { label: '어휘 수준', score: analysisResult.vocabularyLevel },\r\n    { label: '문장 구조 복잡성', score: analysisResult.sentenceComplexity },\r\n    { label: '내용 구성 수준', score: analysisResult.contentLevel },\r\n    { label: '배경지식 의존도', score: analysisResult.backgroundKnowledge }\r\n  ]\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h3 className=\"text-lg font-semibold\">문해력 난이도 분석 결과</h3>\r\n      \r\n      {/* 분석 항목별 점수 */}\r\n      <div className=\"space-y-3\">\r\n        {analysisItems.map((item, index) => (\r\n          <ProgressBar\r\n            key={index}\r\n            label={item.label}\r\n            value={item.score}\r\n            max={10}\r\n            color=\"blue\"\r\n            size=\"medium\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {/* 총점 */}\r\n      <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"font-semibold text-lg\">종합 난이도</span>\r\n          <span className=\"text-2xl font-bold text-blue-600\">\r\n            {analysisResult.totalScore}/10\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default AnalysisChart","import React, { memo } from 'react'\r\n\r\n/**\r\n * 문제 카드 컴포넌트 (메모이제이션)\r\n * @param {object} problem - 문제 데이터\r\n * @param {number} index - 문제 번호\r\n * @param {string} type - 문제 유형 ('vocab' or 'reading')\r\n * @param {function} onAnswerSelect - 답변 선택 콜백\r\n */\r\nconst ProblemCard = memo(function ProblemCard({ problem, index, type, onAnswerSelect }) {\r\n  const handleOptionSelect = (optionIndex) => {\r\n    if (onAnswerSelect) {\r\n      onAnswerSelect(problem.id, optionIndex)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-4 p-4 border rounded-lg hover:shadow-md transition-shadow\">\r\n      <p className=\"font-medium mb-3\">\r\n        {index + 1}. {problem.question}\r\n      </p>\r\n      <div className=\"space-y-2\">\r\n        {problem.options.map((option, optIndex) => (\r\n          <label \r\n            key={optIndex} \r\n            className=\"flex items-center cursor-pointer hover:bg-gray-50 p-2 rounded transition-colors\"\r\n          >\r\n            <input\r\n              type=\"radio\"\r\n              name={`${type}-${problem.id}`}\r\n              className=\"mr-3 text-blue-600 focus:ring-blue-500\"\r\n              onChange={() => handleOptionSelect(optIndex)}\r\n            />\r\n            <span className=\"text-gray-700\">\r\n              {optIndex + 1}) {option}\r\n            </span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default ProblemCard","import React, { useState, useCallback, useRef, useEffect } from 'react'\r\nimport { Edit3, Save, X, RotateCcw } from 'lucide-react'\r\n\r\n/**\r\n * 편집 가능한 텍스트 컴포넌트\r\n * - 인라인 편집 기능\r\n * - 저장/취소 기능\r\n * - 다양한 입력 타입 지원 (text, textarea, select)\r\n * - 검증 기능\r\n */\r\nexport default function EditableText({\r\n  value,\r\n  onSave,\r\n  onCancel,\r\n  placeholder = '텍스트를 입력하세요...',\r\n  type = 'text', // 'text', 'textarea', 'select'\r\n  options = [], // select 타입일 때 사용\r\n  className = '',\r\n  editClassName = '',\r\n  displayClassName = '',\r\n  disabled = false,\r\n  maxLength,\r\n  rows = 3,\r\n  autoFocus = true,\r\n  validator,\r\n  formatDisplay,\r\n  renderDisplay,\r\n  editable = true,\r\n  children\r\n}) {\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [editValue, setEditValue] = useState(value || '')\r\n  const [validationError, setValidationError] = useState('')\r\n  const inputRef = useRef(null)\r\n\r\n  // 편집 시작\r\n  const startEditing = useCallback(() => {\r\n    if (disabled || !editable) return\r\n    setIsEditing(true)\r\n    setEditValue(value || '')\r\n    setValidationError('')\r\n  }, [disabled, editable, value])\r\n\r\n  // 편집 저장\r\n  const saveEditing = useCallback(() => {\r\n    // 검증 실행\r\n    if (validator) {\r\n      const error = validator(editValue)\r\n      if (error) {\r\n        setValidationError(error)\r\n        return\r\n      }\r\n    }\r\n\r\n    // 값이 변경된 경우만 저장\r\n    if (editValue !== value) {\r\n      onSave?.(editValue)\r\n    }\r\n    \r\n    setIsEditing(false)\r\n    setValidationError('')\r\n  }, [editValue, value, validator, onSave])\r\n\r\n  // 편집 취소\r\n  const cancelEditing = useCallback(() => {\r\n    setIsEditing(false)\r\n    setEditValue(value || '')\r\n    setValidationError('')\r\n    onCancel?.()\r\n  }, [value, onCancel])\r\n\r\n  // Enter 키 처리\r\n  const handleKeyDown = useCallback((e) => {\r\n    if (e.key === 'Enter' && type !== 'textarea') {\r\n      e.preventDefault()\r\n      saveEditing()\r\n    } else if (e.key === 'Escape') {\r\n      e.preventDefault()\r\n      cancelEditing()\r\n    }\r\n  }, [type, saveEditing, cancelEditing])\r\n\r\n  // 편집 모드일 때 자동 포커스\r\n  useEffect(() => {\r\n    if (isEditing && autoFocus && inputRef.current) {\r\n      inputRef.current.focus()\r\n      if (type === 'text' || type === 'textarea') {\r\n        inputRef.current.select()\r\n      }\r\n    }\r\n  }, [isEditing, autoFocus, type])\r\n\r\n  // 표시 값 포맷팅\r\n  const displayValue = formatDisplay ? formatDisplay(value) : value\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <div className={`inline-block w-full ${className}`}>\r\n        <div className=\"flex items-start space-x-2\">\r\n          <div className=\"flex-1\">\r\n            {type === 'textarea' ? (\r\n              <textarea\r\n                ref={inputRef}\r\n                value={editValue}\r\n                onChange={(e) => setEditValue(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                placeholder={placeholder}\r\n                maxLength={maxLength}\r\n                rows={rows}\r\n                className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none ${editClassName}`}\r\n              />\r\n            ) : type === 'select' ? (\r\n              <select\r\n                ref={inputRef}\r\n                value={editValue}\r\n                onChange={(e) => setEditValue(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${editClassName}`}\r\n              >\r\n                {options.map((option) => (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            ) : (\r\n              <input\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                value={editValue}\r\n                onChange={(e) => setEditValue(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                placeholder={placeholder}\r\n                maxLength={maxLength}\r\n                className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${editClassName}`}\r\n              />\r\n            )}\r\n            \r\n            {/* 검증 오류 메시지 */}\r\n            {validationError && (\r\n              <p className=\"mt-1 text-sm text-red-600\">{validationError}</p>\r\n            )}\r\n            \r\n            {/* 글자 수 표시 */}\r\n            {maxLength && (\r\n              <p className=\"mt-1 text-xs text-gray-500 text-right\">\r\n                {editValue.length}/{maxLength}\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {/* 편집 버튼들 */}\r\n          <div className=\"flex items-center space-x-1\">\r\n            <button\r\n              onClick={saveEditing}\r\n              className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\"\r\n              title=\"저장\"\r\n            >\r\n              <Save className=\"w-4 h-4\" />\r\n            </button>\r\n            <button\r\n              onClick={cancelEditing}\r\n              className=\"p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors\"\r\n              title=\"취소\"\r\n            >\r\n              <X className=\"w-4 h-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`group inline-block w-full ${className}`}>\r\n      <div className=\"flex items-start justify-between\">\r\n        <div className={`flex-1 ${displayClassName}`}>\r\n          {renderDisplay ? (\r\n            renderDisplay(displayValue)\r\n          ) : children ? (\r\n            children\r\n          ) : (\r\n            <span className={displayValue ? '' : 'text-gray-400 italic'}>\r\n              {displayValue || placeholder}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        {/* 편집 버튼 */}\r\n        {editable && !disabled && (\r\n          <button\r\n            onClick={startEditing}\r\n            className=\"ml-2 p-1 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded opacity-0 group-hover:opacity-100 transition-all\"\r\n            title=\"편집\"\r\n          >\r\n            <Edit3 className=\"w-4 h-4\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * 편집 가능한 리스트 아이템 컴포넌트\r\n */\r\nexport function EditableListItem({ \r\n  items = [], \r\n  onItemsChange, \r\n  placeholder = '항목을 입력하세요...', \r\n  maxItems = 10,\r\n  allowEmpty = false \r\n}) {\r\n  const [editingIndex, setEditingIndex] = useState(null)\r\n  const [newItem, setNewItem] = useState('')\r\n  const [isAdding, setIsAdding] = useState(false)\r\n\r\n  // 아이템 수정\r\n  const updateItem = useCallback((index, newValue) => {\r\n    if (!newValue.trim() && !allowEmpty) {\r\n      return\r\n    }\r\n    \r\n    const updatedItems = [...items]\r\n    updatedItems[index] = newValue.trim()\r\n    onItemsChange?.(updatedItems)\r\n    setEditingIndex(null)\r\n  }, [items, onItemsChange, allowEmpty])\r\n\r\n  // 아이템 삭제\r\n  const removeItem = useCallback((index) => {\r\n    const updatedItems = items.filter((_, i) => i !== index)\r\n    onItemsChange?.(updatedItems)\r\n  }, [items, onItemsChange])\r\n\r\n  // 아이템 추가\r\n  const addItem = useCallback(() => {\r\n    if (!newItem.trim()) {\r\n      setIsAdding(false)\r\n      return\r\n    }\r\n    \r\n    const updatedItems = [...items, newItem.trim()]\r\n    onItemsChange?.(updatedItems)\r\n    setNewItem('')\r\n    setIsAdding(false)\r\n  }, [items, newItem, onItemsChange])\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {/* 기존 아이템들 */}\r\n      {items.map((item, index) => (\r\n        <div key={index} className=\"flex items-center space-x-2 group\">\r\n          <div className=\"flex-1\">\r\n            <EditableText\r\n              value={item}\r\n              onSave={(value) => updateItem(index, value)}\r\n              placeholder={placeholder}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n          \r\n          <button\r\n            onClick={() => removeItem(index)}\r\n            className=\"p-1 text-red-400 hover:text-red-600 hover:bg-red-50 rounded opacity-0 group-hover:opacity-100 transition-all\"\r\n            title=\"삭제\"\r\n          >\r\n            <X className=\"w-4 h-4\" />\r\n          </button>\r\n        </div>\r\n      ))}\r\n\r\n      {/* 새 아이템 추가 */}\r\n      {isAdding ? (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <input\r\n            type=\"text\"\r\n            value={newItem}\r\n            onChange={(e) => setNewItem(e.target.value)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter') {\r\n                e.preventDefault()\r\n                addItem()\r\n              } else if (e.key === 'Escape') {\r\n                setIsAdding(false)\r\n                setNewItem('')\r\n              }\r\n            }}\r\n            placeholder={placeholder}\r\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            autoFocus\r\n          />\r\n          <button\r\n            onClick={addItem}\r\n            className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\"\r\n            title=\"추가\"\r\n          >\r\n            <Save className=\"w-4 h-4\" />\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setIsAdding(false)\r\n              setNewItem('')\r\n            }}\r\n            className=\"p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors\"\r\n            title=\"취소\"\r\n          >\r\n            <X className=\"w-4 h-4\" />\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        items.length < maxItems && (\r\n          <button\r\n            onClick={() => setIsAdding(true)}\r\n            className=\"w-full py-2 border-2 border-dashed border-gray-300 text-gray-500 hover:border-blue-300 hover:text-blue-600 rounded-lg transition-colors\"\r\n          >\r\n            + 항목 추가\r\n          </button>\r\n        )\r\n      )}\r\n    </div>\r\n  )\r\n}","import React, { memo, useMemo } from 'react'\r\nimport EditableText from '../common/EditableText'\r\n\r\n/**\r\n * 텍스트 표시 컴포넌트 (메모이제이션 + 편집 기능)\r\n * @param {string} text - 표시할 텍스트\r\n * @param {string} title - 제목\r\n * @param {boolean} showCharCount - 글자 수 표시 여부\r\n * @param {string} className - 추가 CSS 클래스\r\n * @param {boolean} editable - 편집 가능 여부\r\n * @param {function} onTextChange - 텍스트 변경 핸들러\r\n */\r\nconst TextDisplay = memo(function TextDisplay({ \r\n  text = '', \r\n  title = '읽기 지문', \r\n  showCharCount = true,\r\n  className = '',\r\n  editable = false,\r\n  onTextChange\r\n}) {\r\n  // 글자 수 계산 (메모이제이션)\r\n  const charCount = useMemo(() => text.length, [text])\r\n  \r\n  // 문장 수 계산 (메모이제이션)\r\n  const sentenceCount = useMemo(() => {\r\n    const sentences = text.split(/[.!?]/).filter(s => s.trim())\r\n    return sentences.length\r\n  }, [text])\r\n\r\n  return (\r\n    <div className={`mb-6 ${className}`}>\r\n      <h3 className=\"text-lg font-semibold mb-3\">{title}</h3>\r\n      <div className=\"bg-gray-50 rounded-lg\">\r\n        {editable ? (\r\n          <EditableText\r\n            value={text}\r\n            onSave={onTextChange}\r\n            type=\"textarea\"\r\n            rows={10}\r\n            placeholder=\"지문을 입력하세요...\"\r\n            className=\"w-full\"\r\n            editClassName=\"text-lg leading-relaxed\"\r\n            displayClassName=\"p-4\"\r\n            renderDisplay={(displayValue) => (\r\n              <p className=\"text-lg leading-relaxed whitespace-pre-wrap p-4\">\r\n                {displayValue}\r\n              </p>\r\n            )}\r\n          />\r\n        ) : (\r\n          <p className=\"text-lg leading-relaxed whitespace-pre-wrap p-4\">\r\n            {text}\r\n          </p>\r\n        )}\r\n      </div>\r\n      {showCharCount && (\r\n        <div className=\"mt-2 flex items-center justify-between text-sm text-gray-600\">\r\n          <span>글자 수: {charCount}자</span>\r\n          <span>문장 수: {sentenceCount}개</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default TextDisplay","import React, { useState, useCallback } from 'react'\r\nimport { Plus, BookOpen, Check, X, Edit3, Save, RotateCcw, Sparkles } from 'lucide-react'\r\nimport aiService from '../../services/aiService'\r\n\r\n/**\r\n * 어휘 추출 및 관리 컴포넌트\r\n * - AI를 통한 핵심 어휘 5개 추출\r\n * - 사용자 추가 어휘 기능\r\n * - 어휘별 상세 정보 (한자어 풀이, 예문, 유의어/반의어)\r\n * - 체크리스트 기능으로 학습할 어휘 선택\r\n */\r\nexport default function VocabularyExtractor({ text, gradeLevel, onVocabularyChange }) {\r\n  const [vocabularyList, setVocabularyList] = useState([])\r\n  const [isExtracting, setIsExtracting] = useState(false)\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n  const [newWord, setNewWord] = useState('')\r\n  const [editingId, setEditingId] = useState(null)\r\n  const [editingData, setEditingData] = useState({})\r\n  const [error, setError] = useState(null)\r\n\r\n  // AI를 통한 어휘 추출\r\n  const extractVocabulary = useCallback(async () => {\r\n    if (!text?.trim()) {\r\n      setError('분석할 지문이 없습니다.')\r\n      return\r\n    }\r\n\r\n    setIsExtracting(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await aiService.extractVocabulary(text, gradeLevel, 5)\r\n      \r\n      if (response.success && response.content?.vocabularyList) {\r\n        const extractedWords = response.content.vocabularyList.map((word, index) => ({\r\n          id: `extracted_${Date.now()}_${index}`,\r\n          ...word,\r\n          isChecked: false,\r\n          isCustom: false\r\n        }))\r\n        setVocabularyList(extractedWords)\r\n        onVocabularyChange?.(extractedWords)\r\n      } else {\r\n        throw new Error('어휘 추출 응답이 올바르지 않습니다.')\r\n      }\r\n    } catch (error) {\r\n      console.error('어휘 추출 오류:', error)\r\n      setError('어휘 추출 중 오류가 발생했습니다: ' + error.message)\r\n      \r\n      // 오류 시 샘플 데이터 제공\r\n      const sampleWords = [\r\n        {\r\n          id: 'sample_1',\r\n          word: '관찰',\r\n          meaning: '자세히 살펴보는 것',\r\n          etymology: '觀(볼 관) + 察(살필 찰)',\r\n          synonyms: ['구경', '살피기'],\r\n          antonyms: ['무시', '소홀'],\r\n          difficulty: '★★★☆☆',\r\n          example: '과학자는 현미경으로 세포를 관찰했습니다.',\r\n          gradeAppropriate: true,\r\n          isChecked: false,\r\n          isCustom: false\r\n        },\r\n        {\r\n          id: 'sample_2',\r\n          word: '발전',\r\n          meaning: '더 나은 상태로 나아가는 것',\r\n          etymology: '發(발할 발) + 展(펼 전)',\r\n          synonyms: ['성장', '진보'],\r\n          antonyms: ['퇴보', '후퇴'],\r\n          difficulty: '★★☆☆☆',\r\n          example: '기술의 발전으로 우리 생활이 편리해졌습니다.',\r\n          gradeAppropriate: true,\r\n          isChecked: false,\r\n          isCustom: false\r\n        }\r\n      ]\r\n      setVocabularyList(sampleWords)\r\n    } finally {\r\n      setIsExtracting(false)\r\n    }\r\n  }, [text, gradeLevel, onVocabularyChange])\r\n\r\n  // 사용자 어휘 추가 및 AI 분석\r\n  const addCustomVocabulary = useCallback(async () => {\r\n    if (!newWord.trim()) return\r\n\r\n    setIsGenerating(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // AI를 통해 어휘 분석\r\n      const prompt = `다음 어휘에 대한 상세 정보를 제공해주세요: \"${newWord}\"`\r\n      const response = await aiService.generateContent({\r\n        contentType: 'vocabulary_extraction',\r\n        prompt,\r\n        gradeLevel,\r\n        count: 1\r\n      })\r\n\r\n      let wordData\r\n      if (response.success && response.content?.vocabularyList?.[0]) {\r\n        wordData = response.content.vocabularyList[0]\r\n      } else {\r\n        // AI 실패 시 기본 데이터\r\n        wordData = {\r\n          word: newWord,\r\n          meaning: `${newWord}의 의미를 설명합니다.`,\r\n          etymology: '',\r\n          synonyms: [],\r\n          antonyms: [],\r\n          difficulty: '★★★☆☆',\r\n          example: `${newWord}을(를) 사용한 예문입니다.`,\r\n          gradeAppropriate: true\r\n        }\r\n      }\r\n\r\n      const customWord = {\r\n        id: `custom_${Date.now()}`,\r\n        ...wordData,\r\n        isChecked: true, // 사용자 추가 어휘는 기본적으로 선택됨\r\n        isCustom: true\r\n      }\r\n\r\n      const updatedList = [...vocabularyList, customWord]\r\n      setVocabularyList(updatedList)\r\n      onVocabularyChange?.(updatedList)\r\n      setNewWord('')\r\n    } catch (error) {\r\n      console.error('어휘 생성 오류:', error)\r\n      setError('어휘 정보 생성 중 오류가 발생했습니다: ' + error.message)\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }, [newWord, gradeLevel, vocabularyList, onVocabularyChange])\r\n\r\n  // 어휘 체크 상태 변경\r\n  const toggleVocabularyCheck = useCallback((id) => {\r\n    const updatedList = vocabularyList.map(word =>\r\n      word.id === id ? { ...word, isChecked: !word.isChecked } : word\r\n    )\r\n    setVocabularyList(updatedList)\r\n    onVocabularyChange?.(updatedList)\r\n  }, [vocabularyList, onVocabularyChange])\r\n\r\n  // 어휘 편집 시작\r\n  const startEditing = useCallback((word) => {\r\n    setEditingId(word.id)\r\n    setEditingData({ ...word })\r\n  }, [])\r\n\r\n  // 어휘 편집 저장\r\n  const saveEditing = useCallback(() => {\r\n    const updatedList = vocabularyList.map(word =>\r\n      word.id === editingId ? { ...editingData } : word\r\n    )\r\n    setVocabularyList(updatedList)\r\n    onVocabularyChange?.(updatedList)\r\n    setEditingId(null)\r\n    setEditingData({})\r\n  }, [vocabularyList, editingId, editingData, onVocabularyChange])\r\n\r\n  // 어휘 편집 취소\r\n  const cancelEditing = useCallback(() => {\r\n    setEditingId(null)\r\n    setEditingData({})\r\n  }, [])\r\n\r\n  // 어휘 삭제\r\n  const removeVocabulary = useCallback((id) => {\r\n    const updatedList = vocabularyList.filter(word => word.id !== id)\r\n    setVocabularyList(updatedList)\r\n    onVocabularyChange?.(updatedList)\r\n  }, [vocabularyList, onVocabularyChange])\r\n\r\n  // 선택된 어휘 수\r\n  const selectedCount = vocabularyList.filter(word => word.isChecked).length\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* 헤더 */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center\">\r\n          <BookOpen className=\"w-6 h-6 text-blue-600 mr-2\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">핵심 어휘 분석</h3>\r\n          {selectedCount > 0 && (\r\n            <span className=\"ml-3 px-3 py-1 bg-blue-100 text-blue-700 text-sm font-medium rounded-full\">\r\n              {selectedCount}개 선택됨\r\n            </span>\r\n          )}\r\n        </div>\r\n        \r\n        <button\r\n          onClick={extractVocabulary}\r\n          disabled={isExtracting || !text?.trim()}\r\n          className=\"flex items-center px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n        >\r\n          {isExtracting ? (\r\n            <>\r\n              <RotateCcw className=\"w-4 h-4 mr-2 animate-spin\" />\r\n              분석 중...\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Sparkles className=\"w-4 h-4 mr-2\" />\r\n              어휘 추출\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* 오류 메시지 */}\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n          <p className=\"text-sm text-red-700\">{error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 어휘 추가 입력 */}\r\n      <div className=\"bg-gray-50 rounded-lg p-4\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <input\r\n            type=\"text\"\r\n            value={newWord}\r\n            onChange={(e) => setNewWord(e.target.value)}\r\n            placeholder=\"추가할 어휘를 입력하세요...\"\r\n            className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            onKeyPress={(e) => e.key === 'Enter' && addCustomVocabulary()}\r\n          />\r\n          <button\r\n            onClick={addCustomVocabulary}\r\n            disabled={!newWord.trim() || isGenerating}\r\n            className=\"flex items-center px-4 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            {isGenerating ? (\r\n              <>\r\n                <RotateCcw className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                생성 중...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                추가\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n        <p className=\"mt-2 text-sm text-gray-600\">\r\n          어휘를 추가하면 AI가 자동으로 의미, 예문, 유의어/반의어를 생성합니다.\r\n        </p>\r\n      </div>\r\n\r\n      {/* 어휘 목록 */}\r\n      <div className=\"space-y-4\">\r\n        {vocabularyList.length === 0 ? (\r\n          <div className=\"text-center py-8 text-gray-500\">\r\n            <BookOpen className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\r\n            <p>어휘 추출 버튼을 클릭하여 핵심 어휘를 분석해보세요.</p>\r\n          </div>\r\n        ) : (\r\n          vocabularyList.map((word) => (\r\n            <div\r\n              key={word.id}\r\n              className={`border rounded-lg p-4 transition-all ${\r\n                word.isChecked \r\n                  ? 'border-blue-300 bg-blue-50' \r\n                  : 'border-gray-200 bg-white hover:border-gray-300'\r\n              }`}\r\n            >\r\n              {/* 어휘 헤더 */}\r\n              <div className=\"flex items-start justify-between mb-3\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <button\r\n                    onClick={() => toggleVocabularyCheck(word.id)}\r\n                    className={`w-6 h-6 rounded-md border-2 flex items-center justify-center transition-colors ${\r\n                      word.isChecked\r\n                        ? 'border-blue-500 bg-blue-500 text-white'\r\n                        : 'border-gray-300 hover:border-blue-300'\r\n                    }`}\r\n                  >\r\n                    {word.isChecked && <Check className=\"w-4 h-4\" />}\r\n                  </button>\r\n                  \r\n                  <div>\r\n                    {editingId === word.id ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={editingData.word || ''}\r\n                        onChange={(e) => setEditingData({...editingData, word: e.target.value})}\r\n                        className=\"text-lg font-semibold border border-gray-300 rounded px-2 py-1\"\r\n                      />\r\n                    ) : (\r\n                      <h4 className=\"text-lg font-semibold text-gray-900\">{word.word}</h4>\r\n                    )}\r\n                    \r\n                    <div className=\"flex items-center space-x-2 mt-1\">\r\n                      <span className=\"text-sm text-yellow-600\">{word.difficulty}</span>\r\n                      {word.isCustom && (\r\n                        <span className=\"px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded\">\r\n                          사용자 추가\r\n                        </span>\r\n                      )}\r\n                      {word.gradeAppropriate && (\r\n                        <span className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded\">\r\n                          학년 적합\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {editingId === word.id ? (\r\n                    <>\r\n                      <button\r\n                        onClick={saveEditing}\r\n                        className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\"\r\n                        title=\"저장\"\r\n                      >\r\n                        <Save className=\"w-4 h-4\" />\r\n                      </button>\r\n                      <button\r\n                        onClick={cancelEditing}\r\n                        className=\"p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors\"\r\n                        title=\"취소\"\r\n                      >\r\n                        <RotateCcw className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <button\r\n                        onClick={() => startEditing(word)}\r\n                        className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors\"\r\n                        title=\"편집\"\r\n                      >\r\n                        <Edit3 className=\"w-4 h-4\" />\r\n                      </button>\r\n                      {word.isCustom && (\r\n                        <button\r\n                          onClick={() => removeVocabulary(word.id)}\r\n                          className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\r\n                          title=\"삭제\"\r\n                        >\r\n                          <X className=\"w-4 h-4\" />\r\n                        </button>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* 어휘 상세 정보 */}\r\n              <div className=\"space-y-3\">\r\n                {/* 의미 */}\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-gray-700\">의미: </span>\r\n                  {editingId === word.id ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingData.meaning || ''}\r\n                      onChange={(e) => setEditingData({...editingData, meaning: e.target.value})}\r\n                      className=\"w-full mt-1 border border-gray-300 rounded px-2 py-1\"\r\n                    />\r\n                  ) : (\r\n                    <span className=\"text-gray-900\">{word.meaning}</span>\r\n                  )}\r\n                </div>\r\n\r\n                {/* 한자어 어원 */}\r\n                {word.etymology && (\r\n                  <div>\r\n                    <span className=\"text-sm font-medium text-gray-700\">한자어 풀이: </span>\r\n                    {editingId === word.id ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={editingData.etymology || ''}\r\n                        onChange={(e) => setEditingData({...editingData, etymology: e.target.value})}\r\n                        className=\"w-full mt-1 border border-gray-300 rounded px-2 py-1\"\r\n                      />\r\n                    ) : (\r\n                      <span className=\"text-blue-700 font-medium\">{word.etymology}</span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* 예문 */}\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-gray-700\">예문: </span>\r\n                  {editingId === word.id ? (\r\n                    <textarea\r\n                      value={editingData.example || ''}\r\n                      onChange={(e) => setEditingData({...editingData, example: e.target.value})}\r\n                      className=\"w-full mt-1 border border-gray-300 rounded px-2 py-1\"\r\n                      rows=\"2\"\r\n                    />\r\n                  ) : (\r\n                    <span className=\"text-gray-900 italic\">\"{word.example}\"</span>\r\n                  )}\r\n                </div>\r\n\r\n                {/* 유의어/반의어 */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  {word.synonyms && word.synonyms.length > 0 && (\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-gray-700\">유의어: </span>\r\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                        {word.synonyms.map((synonym, index) => (\r\n                          <span\r\n                            key={index}\r\n                            className=\"px-2 py-1 bg-green-100 text-green-700 text-sm rounded\"\r\n                          >\r\n                            {synonym}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {word.antonyms && word.antonyms.length > 0 && (\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-gray-700\">반의어: </span>\r\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                        {word.antonyms.map((antonym, index) => (\r\n                          <span\r\n                            key={index}\r\n                            className=\"px-2 py-1 bg-red-100 text-red-700 text-sm rounded\"\r\n                          >\r\n                            {antonym}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* 선택된 어휘 요약 */}\r\n      {selectedCount > 0 && (\r\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n          <div className=\"flex items-center\">\r\n            <Check className=\"w-5 h-5 text-blue-600 mr-2\" />\r\n            <span className=\"text-blue-800 font-medium\">\r\n              {selectedCount}개 어휘가 학습 목록에 추가되었습니다.\r\n            </span>\r\n          </div>\r\n          <p className=\"text-sm text-blue-700 mt-1\">\r\n            선택된 어휘들은 PDF 생성 시 어휘 페이지에 포함됩니다.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}","import React, { useState, useCallback } from 'react'\r\nimport { FileQuestion, RefreshCw, Edit3, Save, X, Plus, Check } from 'lucide-react'\r\nimport aiService from '../../services/aiService'\r\nimport EditableText from '../common/EditableText'\r\n\r\n/**\r\n * 문해력 문제 생성 및 관리 컴포넌트\r\n * - AI를 통한 5개 문제 생성 (객관식 3-4개, 서술형 1-2개)\r\n * - 문제별 편집 기능\r\n * - 채점 기준 및 예시 답안 관리\r\n * - 서술형 문제 1-2문장 답안 형태\r\n */\r\nexport default function ProblemGenerator({ text, gradeLevel, onProblemsChange }) {\r\n  const [problems, setProblems] = useState([])\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [editingProblem, setEditingProblem] = useState(null)\r\n\r\n  // AI를 통한 문제 생성\r\n  const generateProblems = useCallback(async () => {\r\n    if (!text?.trim()) {\r\n      setError('분석할 지문이 없습니다.')\r\n      return\r\n    }\r\n\r\n    setIsGenerating(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await aiService.generateReadingProblems(text, 'mixed', 5)\r\n      \r\n      if (response.success && response.content?.problems) {\r\n        const generatedProblems = response.content.problems.map((problem, index) => ({\r\n          id: `generated_${Date.now()}_${index}`,\r\n          ...problem,\r\n          isCustom: false\r\n        }))\r\n        setProblems(generatedProblems)\r\n        onProblemsChange?.(generatedProblems)\r\n      } else {\r\n        throw new Error('문제 생성 응답이 올바르지 않습니다.')\r\n      }\r\n    } catch (error) {\r\n      console.error('문제 생성 오류:', error)\r\n      setError('문제 생성 중 오류가 발생했습니다: ' + error.message)\r\n      \r\n      // 오류 시 샘플 데이터 제공\r\n      const sampleProblems = [\r\n        {\r\n          id: 'sample_1',\r\n          type: 'multiple_choice',\r\n          question: '이 글의 주제로 가장 적절한 것은?',\r\n          options: ['환경 보호의 중요성', '기술 발전의 문제점', '교육의 필요성', '건강한 생활 습관'],\r\n          correctAnswer: 0,\r\n          explanation: '글 전체에서 환경을 보호해야 한다는 내용이 반복적으로 나타나므로 주제는 \\'환경 보호의 중요성\\'입니다.',\r\n          isCustom: false\r\n        },\r\n        {\r\n          id: 'sample_2',\r\n          type: 'multiple_choice',\r\n          question: '글에서 \\'관찰\\'의 의미로 가장 적절한 것은?',\r\n          options: ['대충 보기', '자세히 살펴보기', '빨리 훑어보기', '멀리서 보기'],\r\n          correctAnswer: 1,\r\n          explanation: '\\'관찰\\'은 어떤 대상을 자세히 살펴보고 연구하는 행위를 의미합니다.',\r\n          isCustom: false\r\n        },\r\n        {\r\n          id: 'sample_3',\r\n          type: 'short_answer',\r\n          question: '환경을 보호하기 위해 우리가 할 수 있는 일을 두 가지 쓰시오.',\r\n          expectedLength: '1-2문장',\r\n          sampleAnswer: '쓰레기 분리수거를 하고, 일회용품 사용을 줄인다.',\r\n          gradingCriteria: ['환경 보호와 관련된 구체적인 행동 제시', '두 가지 이상의 방법 언급'],\r\n          explanation: '환경 보호를 위한 실천 방안으로는 재활용, 에너지 절약, 대중교통 이용 등이 있습니다.',\r\n          isCustom: false\r\n        }\r\n      ]\r\n      setProblems(sampleProblems)\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }, [text, gradeLevel, onProblemsChange])\r\n\r\n  // 문제 편집 시작\r\n  const startEditingProblem = useCallback((problem) => {\r\n    setEditingProblem({ ...problem })\r\n  }, [])\r\n\r\n  // 문제 편집 저장\r\n  const saveEditingProblem = useCallback(() => {\r\n    const updatedProblems = problems.map(problem =>\r\n      problem.id === editingProblem.id ? { ...editingProblem } : problem\r\n    )\r\n    setProblems(updatedProblems)\r\n    onProblemsChange?.(updatedProblems)\r\n    setEditingProblem(null)\r\n  }, [problems, editingProblem, onProblemsChange])\r\n\r\n  // 문제 편집 취소\r\n  const cancelEditingProblem = useCallback(() => {\r\n    setEditingProblem(null)\r\n  }, [])\r\n\r\n  // 새 문제 추가\r\n  const addNewProblem = useCallback(() => {\r\n    const newProblem = {\r\n      id: `custom_${Date.now()}`,\r\n      type: 'multiple_choice',\r\n      question: '새 문제를 입력하세요.',\r\n      options: ['선택지 1', '선택지 2', '선택지 3', '선택지 4'],\r\n      correctAnswer: 0,\r\n      explanation: '정답 해설을 입력하세요.',\r\n      isCustom: true\r\n    }\r\n    \r\n    const updatedProblems = [...problems, newProblem]\r\n    setProblems(updatedProblems)\r\n    onProblemsChange?.(updatedProblems)\r\n    setEditingProblem({ ...newProblem })\r\n  }, [problems, onProblemsChange])\r\n\r\n  // 문제 삭제\r\n  const removeProblem = useCallback((id) => {\r\n    const updatedProblems = problems.filter(problem => problem.id !== id)\r\n    setProblems(updatedProblems)\r\n    onProblemsChange?.(updatedProblems)\r\n  }, [problems, onProblemsChange])\r\n\r\n  // 문제 타입 변경\r\n  const changeProblemType = useCallback((type) => {\r\n    if (type === 'short_answer') {\r\n      setEditingProblem({\r\n        ...editingProblem,\r\n        type,\r\n        expectedLength: '1-2문장',\r\n        sampleAnswer: '',\r\n        gradingCriteria: [],\r\n        options: undefined,\r\n        correctAnswer: undefined\r\n      })\r\n    } else {\r\n      setEditingProblem({\r\n        ...editingProblem,\r\n        type,\r\n        options: ['선택지 1', '선택지 2', '선택지 3', '선택지 4'],\r\n        correctAnswer: 0,\r\n        expectedLength: undefined,\r\n        sampleAnswer: undefined,\r\n        gradingCriteria: undefined\r\n      })\r\n    }\r\n  }, [editingProblem])\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* 헤더 */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center\">\r\n          <FileQuestion className=\"w-6 h-6 text-purple-600 mr-2\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">문해력 훈련 문제</h3>\r\n          {problems.length > 0 && (\r\n            <span className=\"ml-3 px-3 py-1 bg-purple-100 text-purple-700 text-sm font-medium rounded-full\">\r\n              {problems.length}개 문제\r\n            </span>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-3\">\r\n          <button\r\n            onClick={addNewProblem}\r\n            className=\"flex items-center px-4 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors\"\r\n          >\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            문제 추가\r\n          </button>\r\n          \r\n          <button\r\n            onClick={generateProblems}\r\n            disabled={isGenerating || !text?.trim()}\r\n            className=\"flex items-center px-4 py-2 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            {isGenerating ? (\r\n              <>\r\n                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                생성 중...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <FileQuestion className=\"w-4 h-4 mr-2\" />\r\n                문제 생성\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 오류 메시지 */}\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n          <p className=\"text-sm text-red-700\">{error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 문제 목록 */}\r\n      <div className=\"space-y-6\">\r\n        {problems.length === 0 ? (\r\n          <div className=\"text-center py-8 text-gray-500\">\r\n            <FileQuestion className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\r\n            <p>문제 생성 버튼을 클릭하여 문해력 훈련 문제를 만들어보세요.</p>\r\n            <p className=\"text-sm mt-2\">객관식 3-4개, 서술형 1-2개가 생성됩니다.</p>\r\n          </div>\r\n        ) : (\r\n          problems.map((problem, index) => (\r\n            <div\r\n              key={problem.id}\r\n              className=\"border rounded-lg p-6 bg-white hover:shadow-md transition-shadow\"\r\n            >\r\n              {/* 문제 헤더 */}\r\n              <div className=\"flex items-start justify-between mb-4\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <span className=\"flex items-center justify-center w-8 h-8 bg-purple-100 text-purple-700 font-semibold rounded-full\">\r\n                    {index + 1}\r\n                  </span>\r\n                  <div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className={`px-3 py-1 text-sm font-medium rounded-full ${\r\n                        problem.type === 'multiple_choice'\r\n                          ? 'bg-blue-100 text-blue-700'\r\n                          : 'bg-green-100 text-green-700'\r\n                      }`}>\r\n                        {problem.type === 'multiple_choice' ? '객관식' : '서술형'}\r\n                      </span>\r\n                      {problem.isCustom && (\r\n                        <span className=\"px-2 py-1 bg-yellow-100 text-yellow-700 text-xs font-medium rounded\">\r\n                          사용자 추가\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {editingProblem?.id === problem.id ? (\r\n                    <>\r\n                      <button\r\n                        onClick={saveEditingProblem}\r\n                        className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\"\r\n                        title=\"저장\"\r\n                      >\r\n                        <Save className=\"w-4 h-4\" />\r\n                      </button>\r\n                      <button\r\n                        onClick={cancelEditingProblem}\r\n                        className=\"p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors\"\r\n                        title=\"취소\"\r\n                      >\r\n                        <X className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <button\r\n                        onClick={() => startEditingProblem(problem)}\r\n                        className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors\"\r\n                        title=\"편집\"\r\n                      >\r\n                        <Edit3 className=\"w-4 h-4\" />\r\n                      </button>\r\n                      {problem.isCustom && (\r\n                        <button\r\n                          onClick={() => removeProblem(problem.id)}\r\n                          className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\r\n                          title=\"삭제\"\r\n                        >\r\n                          <X className=\"w-4 h-4\" />\r\n                        </button>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* 문제 편집 폼 */}\r\n              {editingProblem?.id === problem.id ? (\r\n                <div className=\"space-y-4\">\r\n                  {/* 문제 타입 선택 */}\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      문제 타입\r\n                    </label>\r\n                    <div className=\"flex space-x-4\">\r\n                      <label className=\"flex items-center\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"problemType\"\r\n                          value=\"multiple_choice\"\r\n                          checked={editingProblem.type === 'multiple_choice'}\r\n                          onChange={(e) => changeProblemType(e.target.value)}\r\n                          className=\"mr-2\"\r\n                        />\r\n                        객관식\r\n                      </label>\r\n                      <label className=\"flex items-center\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"problemType\"\r\n                          value=\"short_answer\"\r\n                          checked={editingProblem.type === 'short_answer'}\r\n                          onChange={(e) => changeProblemType(e.target.value)}\r\n                          className=\"mr-2\"\r\n                        />\r\n                        서술형\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* 문제 내용 */}\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      문제\r\n                    </label>\r\n                    <textarea\r\n                      value={editingProblem.question}\r\n                      onChange={(e) => setEditingProblem({\r\n                        ...editingProblem,\r\n                        question: e.target.value\r\n                      })}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\r\n                      rows=\"2\"\r\n                    />\r\n                  </div>\r\n\r\n                  {/* 객관식 선택지 */}\r\n                  {editingProblem.type === 'multiple_choice' && (\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                        선택지\r\n                      </label>\r\n                      <div className=\"space-y-2\">\r\n                        {editingProblem.options?.map((option, optionIndex) => (\r\n                          <div key={optionIndex} className=\"flex items-center space-x-2\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"correctAnswer\"\r\n                              checked={editingProblem.correctAnswer === optionIndex}\r\n                              onChange={() => setEditingProblem({\r\n                                ...editingProblem,\r\n                                correctAnswer: optionIndex\r\n                              })}\r\n                              className=\"text-purple-600\"\r\n                            />\r\n                            <span className=\"w-6 text-sm text-gray-600\">\r\n                              {optionIndex + 1}.\r\n                            </span>\r\n                            <input\r\n                              type=\"text\"\r\n                              value={option}\r\n                              onChange={(e) => {\r\n                                const newOptions = [...editingProblem.options]\r\n                                newOptions[optionIndex] = e.target.value\r\n                                setEditingProblem({\r\n                                  ...editingProblem,\r\n                                  options: newOptions\r\n                                })\r\n                              }}\r\n                              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* 서술형 문제 설정 */}\r\n                  {editingProblem.type === 'short_answer' && (\r\n                    <>\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                          예상 답안 길이\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={editingProblem.expectedLength || '1-2문장'}\r\n                          onChange={(e) => setEditingProblem({\r\n                            ...editingProblem,\r\n                            expectedLength: e.target.value\r\n                          })}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\r\n                        />\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                          예시 답안\r\n                        </label>\r\n                        <textarea\r\n                          value={editingProblem.sampleAnswer || ''}\r\n                          onChange={(e) => setEditingProblem({\r\n                            ...editingProblem,\r\n                            sampleAnswer: e.target.value\r\n                          })}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\r\n                          rows=\"2\"\r\n                        />\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                          채점 기준 (쉼표로 구분)\r\n                        </label>\r\n                        <textarea\r\n                          value={editingProblem.gradingCriteria?.join(', ') || ''}\r\n                          onChange={(e) => setEditingProblem({\r\n                            ...editingProblem,\r\n                            gradingCriteria: e.target.value.split(',').map(s => s.trim()).filter(s => s)\r\n                          })}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\r\n                          rows=\"2\"\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n\r\n                  {/* 해설 */}\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      정답 해설\r\n                    </label>\r\n                    <textarea\r\n                      value={editingProblem.explanation}\r\n                      onChange={(e) => setEditingProblem({\r\n                        ...editingProblem,\r\n                        explanation: e.target.value\r\n                      })}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\r\n                      rows=\"3\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                /* 문제 표시 */\r\n                <div className=\"space-y-4\">\r\n                  {/* 문제 내용 */}\r\n                  <div>\r\n                    <p className=\"text-lg font-medium text-gray-900 mb-3\">\r\n                      {problem.question}\r\n                    </p>\r\n\r\n                    {/* 객관식 선택지 */}\r\n                    {problem.type === 'multiple_choice' && (\r\n                      <div className=\"space-y-2 mb-4\">\r\n                        {problem.options?.map((option, optionIndex) => (\r\n                          <div key={optionIndex} className=\"flex items-center space-x-2\">\r\n                            <span className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-medium ${\r\n                              problem.correctAnswer === optionIndex\r\n                                ? 'bg-green-100 text-green-700'\r\n                                : 'bg-gray-100 text-gray-600'\r\n                            }`}>\r\n                              {optionIndex + 1}\r\n                            </span>\r\n                            <span className={problem.correctAnswer === optionIndex ? 'font-medium text-green-700' : ''}>\r\n                              {option}\r\n                            </span>\r\n                            {problem.correctAnswer === optionIndex && (\r\n                              <Check className=\"w-4 h-4 text-green-600\" />\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* 서술형 문제 정보 */}\r\n                    {problem.type === 'short_answer' && (\r\n                      <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                          <div>\r\n                            <span className=\"text-sm font-medium text-gray-700\">예상 답안 길이:</span>\r\n                            <p className=\"text-sm text-gray-600\">{problem.expectedLength}</p>\r\n                          </div>\r\n                          {problem.sampleAnswer && (\r\n                            <div>\r\n                              <span className=\"text-sm font-medium text-gray-700\">예시 답안:</span>\r\n                              <p className=\"text-sm text-gray-600 italic\">\"{problem.sampleAnswer}\"</p>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        {problem.gradingCriteria && problem.gradingCriteria.length > 0 && (\r\n                          <div className=\"mt-3\">\r\n                            <span className=\"text-sm font-medium text-gray-700\">채점 기준:</span>\r\n                            <ul className=\"text-sm text-gray-600 list-disc list-inside mt-1\">\r\n                              {problem.gradingCriteria.map((criteria, index) => (\r\n                                <li key={index}>{criteria}</li>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* 해설 */}\r\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n                      <div className=\"flex items-start\">\r\n                        <span className=\"text-sm font-medium text-blue-700 mr-2\">해설:</span>\r\n                        <p className=\"text-sm text-blue-800\">{problem.explanation}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* 문제 생성 안내 */}\r\n      {problems.length > 0 && (\r\n        <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\r\n          <div className=\"flex items-center\">\r\n            <FileQuestion className=\"w-5 h-5 text-purple-600 mr-2\" />\r\n            <span className=\"text-purple-800 font-medium\">\r\n              총 {problems.length}개 문제가 생성되었습니다.\r\n            </span>\r\n          </div>\r\n          <p className=\"text-sm text-purple-700 mt-1\">\r\n            객관식: {problems.filter(p => p.type === 'multiple_choice').length}개, \r\n            서술형: {problems.filter(p => p.type === 'short_answer').length}개\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}","import React, { useState, useCallback } from 'react'\r\nimport { \r\n  BookOpen, \r\n  Sparkles, \r\n  FileText, \r\n  Upload, \r\n  Download,\r\n  ArrowRight,\r\n  RefreshCw,\r\n  Globe\r\n} from 'lucide-react'\r\nimport aiService from '../services/aiService'\r\nimport { config } from '../config'\r\nimport { TOPIC_CATEGORIES, GRADE_OPTIONS, LENGTH_OPTIONS } from '../utils/constants'\r\nimport { validateFile } from '../utils/validation'\r\nimport { useApiCall, useParallelApiCalls } from '../hooks/useApiCall'\r\nimport { useTextAnalysis } from '../hooks/useTextAnalysis'\r\nimport { generatePDF } from '../utils/pdfGenerator'\r\nimport { getAvailableProviders } from '../config/apiKeys'\r\nimport ErrorMessage from '../components/common/ErrorMessage'\r\nimport AnalysisChart from '../components/literacy/AnalysisChart'\r\nimport ProblemCard from '../components/literacy/ProblemCard'\r\nimport TextDisplay from '../components/literacy/TextDisplay'\r\nimport VocabularyExtractor from '../components/literacy/VocabularyExtractor'\r\nimport ProblemGenerator from '../components/literacy/ProblemGenerator'\r\n\r\nexport default function ReadingTrainerPage() {\r\n  const [mode, setMode] = useState('generate') // 'generate' or 'input'\r\n  const [step, setStep] = useState(1) // 1: 설정, 2: 지문, 3: 문제\r\n  \r\n  // 지문 생성 설정\r\n  const [selectedTopic, setSelectedTopic] = useState('')\r\n  const [customTopic, setCustomTopic] = useState('')\r\n  const [selectedGrade, setSelectedGrade] = useState('elem4')\r\n  const [selectedLength, setSelectedLength] = useState('800')\r\n  const [customLength, setCustomLength] = useState('')\r\n  const [selectedProvider, setSelectedProvider] = useState('claude')\r\n  \r\n  // 사용 가능한 AI 제공자\r\n  const availableProviders = getAvailableProviders()\r\n  \r\n  // 지문 관련 상태\r\n  const [generatedText, setGeneratedText] = useState('')\r\n  const [userText, setUserText] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  \r\n  // 텍스트 분석 훅 사용\r\n  const { analysisResult, analyzing, analyzeText } = useTextAnalysis()\r\n  \r\n  // 문제 관련 상태  \r\n  const [vocabularyProblems, setVocabularyProblems] = useState([])\r\n  const [readingProblems, setReadingProblems] = useState([])\r\n  const [generatedProblems, setGeneratedProblems] = useState([])\r\n  const [selectedProblemCount] = useState({ vocabulary: 10, reading: 5 })\r\n  \r\n  // 어휘 관련 상태\r\n  const [selectedVocabulary, setSelectedVocabulary] = useState([])\r\n  \r\n  // 사용자 입력 관련 상태\r\n  const [inputType, setInputType] = useState('paste')\r\n  const [uploadedFile, setUploadedFile] = useState(null)\r\n  const [urlInput, setUrlInput] = useState('')\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n  \r\n  // API 호출 훅\r\n  const { execute: generateTextApi, loading: generatingText } = useApiCall(\r\n    useCallback((params) => aiService.generateContent(params), [])\r\n  )\r\n  \r\n  const { executeAll: generateProblemsApi, loading: generatingProblems } = useParallelApiCalls()\r\n  \r\n  // AI 지문 생성\r\n  const handleGenerateText = useCallback(async () => {\r\n    setErrorMessage(null)\r\n    setGeneratedText('') // 이전 텍스트 초기화\r\n    try {\r\n      const topic = selectedTopic === 'custom' ? customTopic : selectedTopic\r\n      const length = selectedLength === 'custom' ? customLength : selectedLength\r\n      \r\n      // 학년을 나이로 변환\r\n      const gradeInfo = GRADE_OPTIONS.find(grade => grade.value === selectedGrade)\r\n      const targetAge = gradeInfo ? gradeInfo.age : 10\r\n      \r\n      const prompt = `${topic}에 대한 ${selectedGrade} 수준의 한국어 읽기 지문을 ${length}자로 작성해주세요.`\r\n      \r\n      const response = await generateTextApi({\r\n        provider: selectedProvider,\r\n        contentType: 'reading',\r\n        prompt: topic,\r\n        targetAge: targetAge,\r\n        difficulty: 'intermediate',\r\n        contentLength: parseInt(length)\r\n      })\r\n      \r\n      setGeneratedText(typeof response.content === 'string' ? response.content : response.content.mainContent?.introduction || response.content)\r\n      setStep(2)\r\n    } catch (error) {\r\n      console.error('지문 생성 오류:', error)\r\n      setErrorMessage(error.message || '지문 생성에 실패했습니다')\r\n    }\r\n  }, [selectedTopic, customTopic, selectedGrade, selectedLength, customLength, generateTextApi])\r\n  \r\n  \r\n  // 지문 분석 실행\r\n  const handleAnalyzeText = useCallback(async () => {\r\n    const textToAnalyze = mode === 'generate' ? generatedText : userText\r\n    await analyzeText(textToAnalyze, selectedGrade)\r\n  }, [mode, generatedText, userText, selectedGrade, analyzeText])\r\n  \r\n  // 어휘 선택 변경 핸들러\r\n  const handleVocabularyChange = useCallback((vocabularyList) => {\r\n    setSelectedVocabulary(vocabularyList)\r\n  }, [])\r\n  \r\n  // 문제 변경 핸들러\r\n  const handleProblemsChange = useCallback((problemsList) => {\r\n    setGeneratedProblems(problemsList)\r\n  }, [])\r\n  \r\n  // 지문 편집 핸들러\r\n  const handleTextEdit = useCallback((newText) => {\r\n    if (mode === 'generate') {\r\n      setGeneratedText(newText)\r\n    } else {\r\n      setUserText(newText)\r\n    }\r\n  }, [mode])\r\n  \r\n  // 파일 업로드 처리 (메모이제이션)\r\n  const handleFileUpload = useCallback(async (event) => {\r\n    const file = event.target.files[0]\r\n    if (!file) return\r\n    \r\n    const validation = validateFile(file)\r\n    if (!validation.isValid) {\r\n      setErrorMessage(validation.error)\r\n      return\r\n    }\r\n    \r\n    setUploadedFile(file)\r\n    setErrorMessage(null)\r\n    \r\n    // 파일 읽기 (간단한 텍스트 파일만 처리)\r\n    if (file.type === 'text/plain') {\r\n      const reader = new FileReader()\r\n      reader.onload = (e) => {\r\n        setUserText(e.target.result)\r\n      }\r\n      reader.readAsText(file)\r\n    }\r\n  }, [])\r\n  \r\n  // 사용자 입력 처리\r\n  const handleProcessUserInput = async () => {\r\n    setIsProcessing(true)\r\n    try {\r\n      let textToProcess = userText\r\n      \r\n      if (inputType === 'file' && uploadedFile) {\r\n        // 파일 처리 로직\r\n        if (uploadedFile.type !== 'text/plain') {\r\n          alert('⚠️ 현재는 텍스트 파일(.txt)만 지원됩니다.\\n\\n지원 예정: DOCX, PDF 파일');\r\n          return\r\n        }\r\n      } else if (inputType === 'url') {\r\n        // URL 처리 로직 (실제로는 서버에서 처리해야 함)\r\n        alert('🚧 URL 입력 기능은 준비 중입니다.\\n\\n곧 웹 페이지에서 텍스트를 자동으로 추출할 수 있습니다.');\r\n        return\r\n      }\r\n      \r\n      if (textToProcess.trim()) {\r\n        setStep(2)\r\n      }\r\n    } catch (error) {\r\n      console.error('입력 처리 오류:', error)\r\n      alert(`⚠️ 입력 처리 중 오류가 발생했습니다.\\n\\n오류 내용: ${error.message}\\n\\n다시 시도해주세요.`);\r\n    } finally {\r\n      setIsProcessing(false)\r\n    }\r\n  }\r\n  \r\n  // 문제 생성 (병렬 처리)\r\n  const generateProblems = useCallback(async () => {\r\n    setErrorMessage(null)\r\n    try {\r\n      const textToAnalyze = mode === 'generate' ? generatedText : userText\r\n      \r\n      // 병렬로 문제 생성\r\n      const results = await generateProblemsApi([\r\n        aiService.generateReadingProblems(\r\n          textToAnalyze, \r\n          'vocabulary', \r\n          selectedProblemCount.vocabulary\r\n        ),\r\n        aiService.generateReadingProblems(\r\n          textToAnalyze, \r\n          'comprehension', \r\n          selectedProblemCount.reading\r\n        )\r\n      ])\r\n      \r\n      if (results.success.length > 0) {\r\n        // 성공한 결과 처리\r\n        results.success.forEach((response, index) => {\r\n          if (response.success) {\r\n            if (index === 0) {\r\n              setVocabularyProblems(response.content.problems)\r\n            } else {\r\n              setReadingProblems(response.content.problems)\r\n            }\r\n          }\r\n        })\r\n      }\r\n      \r\n      // 실패한 것이 있으면 샘플 문제로 대체\r\n      if (results.hasErrors) {\r\n        if (!vocabularyProblems.length) {\r\n          setVocabularyProblems([\r\n            {\r\n              id: 1,\r\n              word: '예시단어',\r\n              question: '\"예시단어\"의 의미로 가장 적절한 것은?',\r\n              options: ['의미1', '의미2', '의미3', '의미4'],\r\n              answer: 0\r\n            }\r\n          ])\r\n        }\r\n        if (!readingProblems.length) {\r\n          setReadingProblems([\r\n            {\r\n              id: 1,\r\n              question: '이 글의 중심 내용은 무엇입니까?',\r\n              options: ['선택지1', '선택지2', '선택지3', '선택지4'],\r\n              answer: 0\r\n            }\r\n          ])\r\n        }\r\n      }\r\n      \r\n      setStep(3)\r\n    } catch (error) {\r\n      console.error('문제 생성 오류:', error)\r\n      setErrorMessage('문제 생성 중 오류가 발생했습니다')\r\n    }\r\n  }, [mode, generatedText, userText, selectedProblemCount, generateProblemsApi, vocabularyProblems, readingProblems])\r\n  \r\n  // PDF 다운로드 처리\r\n  const handlePDFDownload = useCallback(async () => {\r\n    try {\r\n      const textToExport = mode === 'generate' ? generatedText : userText\r\n      const gradeLabel = GRADE_OPTIONS.find(g => g.value === selectedGrade)?.label || selectedGrade\r\n      \r\n      // 백엔드 PDF 생성 API 호출\r\n      const response = await fetch(`${config.apiUrl}/api/pdf/generate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          title: '원바이트 PRO 문해력 훈련',\r\n          grade: gradeLabel,\r\n          text: textToExport,\r\n          analysisResult,\r\n          selectedVocabulary: selectedVocabulary.filter(word => word.isChecked || word.selected),\r\n          generatedProblems,\r\n          vocabularyProblems,\r\n          readingProblems\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const result = await response.json()\r\n      \r\n      if (result.success) {\r\n        // HTML 콘텐츠를 새 창에서 열어서 PDF로 저장할 수 있게 함\r\n        const printWindow = window.open('', '_blank', 'width=900,height=1200,scrollbars=yes')\r\n        printWindow.document.write(result.htmlContent)\r\n        printWindow.document.close()\r\n        \r\n        // 인쇄 대화상자가 나타날 수 있도록 잠시 기다림\r\n        setTimeout(() => {\r\n          printWindow.focus()\r\n        }, 500)\r\n      } else {\r\n        throw new Error(result.error || 'PDF 생성에 실패했습니다')\r\n      }\r\n    } catch (error) {\r\n      console.error('PDF 생성 오류:', error)\r\n      setErrorMessage(`PDF 생성 중 오류가 발생했습니다: ${error.message}`)\r\n    }\r\n  }, [mode, generatedText, userText, selectedGrade, analysisResult, selectedVocabulary, generatedProblems, vocabularyProblems, readingProblems])\r\n  \r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* 헤더 */}\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex justify-between items-center py-4\">\r\n            <div className=\"flex items-center\">\r\n              <BookOpen className=\"h-8 w-8 text-blue-600\" />\r\n              <h1 className=\"ml-3 text-2xl font-bold text-gray-900\">원바이트 PRO</h1>\r\n              <span className=\"ml-3 px-3 py-1 bg-blue-100 text-blue-700 text-sm font-medium rounded-full\">\r\n                문해력 훈련\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* 에러 메시지 표시 */}\r\n        {errorMessage && (\r\n          <ErrorMessage \r\n            type=\"error\"\r\n            title=\"오류\"\r\n            message={errorMessage}\r\n            onClose={() => setErrorMessage(null)}\r\n          />\r\n        )}\r\n        \r\n        {/* 진행 단계 표시 */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-center space-x-4\">\r\n            <div className={`flex items-center ${step >= 1 ? 'text-blue-600' : 'text-gray-400'}`}>\r\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\r\n                step >= 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n              }`}>\r\n                1\r\n              </div>\r\n              <span className=\"ml-2 font-medium\">지문 준비</span>\r\n            </div>\r\n            <ArrowRight className=\"w-5 h-5 text-gray-400\" />\r\n            <div className={`flex items-center ${step >= 2 ? 'text-blue-600' : 'text-gray-400'}`}>\r\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\r\n                step >= 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n              }`}>\r\n                2\r\n              </div>\r\n              <span className=\"ml-2 font-medium\">지문 분석</span>\r\n            </div>\r\n            <ArrowRight className=\"w-5 h-5 text-gray-400\" />\r\n            <div className={`flex items-center ${step >= 3 ? 'text-blue-600' : 'text-gray-400'}`}>\r\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\r\n                step >= 3 ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n              }`}>\r\n                3\r\n              </div>\r\n              <span className=\"ml-2 font-medium\">문제 풀이</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Step 1: 지문 준비 */}\r\n        {step === 1 && (\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n            <h2 className=\"text-2xl font-bold mb-6\">지문 준비하기</h2>\r\n            \r\n            {/* 모드 선택 */}\r\n            <div className=\"grid grid-cols-2 gap-4 mb-8\">\r\n              <button\r\n                onClick={() => setMode('generate')}\r\n                className={`p-6 border-2 rounded-lg transition-all ${\r\n                  mode === 'generate' \r\n                    ? 'border-blue-500 bg-blue-50' \r\n                    : 'border-gray-300 hover:border-gray-400'\r\n                }`}\r\n              >\r\n                <Sparkles className=\"w-8 h-8 mx-auto mb-2 text-blue-600\" />\r\n                <h3 className=\"font-semibold mb-1\">AI 지문 생성</h3>\r\n                <p className=\"text-sm text-gray-600\">관심 주제로 AI가 지문 생성</p>\r\n              </button>\r\n              \r\n              <button\r\n                onClick={() => setMode('input')}\r\n                className={`p-6 border-2 rounded-lg transition-all ${\r\n                  mode === 'input' \r\n                    ? 'border-blue-500 bg-blue-50' \r\n                    : 'border-gray-300 hover:border-gray-400'\r\n                }`}\r\n              >\r\n                <Upload className=\"w-8 h-8 mx-auto mb-2 text-blue-600\" />\r\n                <h3 className=\"font-semibold mb-1\">직접 입력</h3>\r\n                <p className=\"text-sm text-gray-600\">준비된 지문을 직접 입력</p>\r\n              </button>\r\n            </div>\r\n\r\n            {/* AI 생성 모드 */}\r\n            {mode === 'generate' && (\r\n              <div className=\"space-y-6\">\r\n                {/* 주제 선택 */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    주제 선택\r\n                  </label>\r\n                  <div className=\"grid grid-cols-3 gap-3\">\r\n                    {TOPIC_CATEGORIES.map(topic => (\r\n                      <button\r\n                        key={topic.id}\r\n                        onClick={() => setSelectedTopic(topic.id)}\r\n                        className={`p-3 border rounded-lg text-sm transition-all ${\r\n                          selectedTopic === topic.id\r\n                            ? 'border-blue-500 bg-blue-50 text-blue-700'\r\n                            : 'border-gray-300 hover:border-gray-400'\r\n                        }`}\r\n                      >\r\n                        {topic.label}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                  {selectedTopic === 'custom' && (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={customTopic}\r\n                      onChange={(e) => setCustomTopic(e.target.value)}\r\n                      placeholder=\"관심 주제를 입력하세요\"\r\n                      className=\"mt-3 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                {/* 학년 선택 */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    학년 선택\r\n                  </label>\r\n                  <select\r\n                    value={selectedGrade}\r\n                    onChange={(e) => setSelectedGrade(e.target.value)}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    {GRADE_OPTIONS.map(grade => (\r\n                      <option key={grade.value} value={grade.value}>\r\n                        {grade.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                {/* AI 제공자 선택 */}\r\n                {availableProviders.length > 0 && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      AI 모델 선택\r\n                    </label>\r\n                    <select\r\n                      value={selectedProvider}\r\n                      onChange={(e) => setSelectedProvider(e.target.value)}\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      {availableProviders.map(provider => (\r\n                        <option key={provider.id} value={provider.id}>\r\n                          {provider.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n\r\n                {/* 지문 길이 */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    지문 길이\r\n                  </label>\r\n                  <div className=\"grid grid-cols-4 gap-3\">\r\n                    {LENGTH_OPTIONS.map(length => (\r\n                      <button\r\n                        key={length.value}\r\n                        onClick={() => setSelectedLength(length.value)}\r\n                        className={`p-2 border rounded-lg text-sm transition-all ${\r\n                          selectedLength === length.value\r\n                            ? 'border-blue-500 bg-blue-50 text-blue-700'\r\n                            : 'border-gray-300 hover:border-gray-400'\r\n                        }`}\r\n                      >\r\n                        {length.label}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                  {selectedLength === 'custom' && (\r\n                    <input\r\n                      type=\"number\"\r\n                      value={customLength}\r\n                      onChange={(e) => setCustomLength(e.target.value)}\r\n                      placeholder=\"글자 수 입력 (200-2000)\"\r\n                      min=\"200\"\r\n                      max=\"2000\"\r\n                      className=\"mt-3 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                {/* API 키 설정 안내 */}\r\n                {availableProviders.length === 0 && (\r\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\r\n                    <p className=\"text-sm text-yellow-800 mb-2\">\r\n                      <strong>AI API 키가 설정되지 않았습니다.</strong>\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-700 mb-2\">\r\n                      AI 기능을 사용하려면 다음 중 하나의 API 키가 필요합니다:\r\n                    </p>\r\n                    <ul className=\"text-sm text-gray-600 space-y-1 ml-4\">\r\n                      <li>• OpenAI API 키: <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">https://platform.openai.com/api-keys</a></li>\r\n                      <li>• Anthropic Claude API 키: <a href=\"https://console.anthropic.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">https://console.anthropic.com/</a></li>\r\n                    </ul>\r\n                    <p className=\"text-sm text-gray-600 mt-2\">\r\n                      Vercel 환경 변수에 VITE_OPENAI_API_KEY 또는 VITE_ANTHROPIC_API_KEY를 추가해주세요.\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {/* 생성 버튼 */}\r\n                <button\r\n                  onClick={handleGenerateText}\r\n                  disabled={!selectedTopic || generatingText || availableProviders.length === 0}\r\n                  className=\"w-full py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n                >\r\n                  {generatingText ? (\r\n                    <span className=\"flex items-center justify-center\">\r\n                      <RefreshCw className=\"animate-spin mr-2\" />\r\n                      지문 생성 중...\r\n                    </span>\r\n                  ) : (\r\n                    '지문 생성하기'\r\n                  )}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {/* 직접 입력 모드 */}\r\n            {mode === 'input' && (\r\n              <div className=\"space-y-6\">\r\n                {/* 입력 방식 선택 */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    입력 방식 선택\r\n                  </label>\r\n                  <div className=\"grid grid-cols-3 gap-3\">\r\n                    <button\r\n                      onClick={() => setInputType('paste')}\r\n                      className={`p-3 border rounded-lg text-sm transition-all ${\r\n                        inputType === 'paste'\r\n                          ? 'border-blue-500 bg-blue-50 text-blue-700'\r\n                          : 'border-gray-300 hover:border-gray-400'\r\n                      }`}\r\n                    >\r\n                      <FileText className=\"w-5 h-5 mx-auto mb-1\" />\r\n                      텍스트 붙여넣기\r\n                    </button>\r\n                    <button\r\n                      onClick={() => setInputType('file')}\r\n                      className={`p-3 border rounded-lg text-sm transition-all ${\r\n                        inputType === 'file'\r\n                          ? 'border-blue-500 bg-blue-50 text-blue-700'\r\n                          : 'border-gray-300 hover:border-gray-400'\r\n                      }`}\r\n                    >\r\n                      <Upload className=\"w-5 h-5 mx-auto mb-1\" />\r\n                      파일 업로드\r\n                    </button>\r\n                    <button\r\n                      onClick={() => setInputType('url')}\r\n                      className={`p-3 border rounded-lg text-sm transition-all ${\r\n                        inputType === 'url'\r\n                          ? 'border-blue-500 bg-blue-50 text-blue-700'\r\n                          : 'border-gray-300 hover:border-gray-400'\r\n                      }`}\r\n                    >\r\n                      <Globe className=\"w-5 h-5 mx-auto mb-1\" />\r\n                      URL 입력\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* 텍스트 붙여넣기 */}\r\n                {inputType === 'paste' && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      지문 입력\r\n                    </label>\r\n                    <textarea\r\n                      value={userText}\r\n                      onChange={(e) => setUserText(e.target.value)}\r\n                      placeholder=\"학습할 지문을 입력하거나 붙여넣으세요...\"\r\n                      className=\"w-full h-64 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 resize-none\"\r\n                    />\r\n                    <div className=\"mt-2 text-sm text-gray-600\">\r\n                      글자 수: {userText.length}자\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* 파일 업로드 */}\r\n                {inputType === 'file' && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      파일 선택\r\n                    </label>\r\n                    <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg\">\r\n                      <div className=\"space-y-1 text-center\">\r\n                        <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\r\n                        <div className=\"flex text-sm text-gray-600\">\r\n                          <label\r\n                            htmlFor=\"file-upload\"\r\n                            className=\"relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500\"\r\n                          >\r\n                            <span>파일 선택</span>\r\n                            <input\r\n                              id=\"file-upload\"\r\n                              name=\"file-upload\"\r\n                              type=\"file\"\r\n                              className=\"sr-only\"\r\n                              accept=\".txt,.docx,.pdf\"\r\n                              onChange={handleFileUpload}\r\n                            />\r\n                          </label>\r\n                          <p className=\"pl-1\">또는 드래그 앤 드롭</p>\r\n                        </div>\r\n                        <p className=\"text-xs text-gray-500\">\r\n                          TXT, DOCX, PDF 파일 지원\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    {uploadedFile && (\r\n                      <div className=\"mt-3 p-3 bg-gray-50 rounded-lg\">\r\n                        <p className=\"text-sm font-medium\">선택된 파일: {uploadedFile.name}</p>\r\n                        <p className=\"text-xs text-gray-500\">크기: {(uploadedFile.size / 1024).toFixed(1)} KB</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* URL 입력 */}\r\n                {inputType === 'url' && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      웹 문서 URL\r\n                    </label>\r\n                    <input\r\n                      type=\"url\"\r\n                      value={urlInput}\r\n                      onChange={(e) => setUrlInput(e.target.value)}\r\n                      placeholder=\"https://example.com/article\"\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    />\r\n                    <p className=\"mt-1 text-xs text-gray-500\">\r\n                      웹 페이지의 텍스트를 자동으로 추출합니다\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {/* 학년 선택 (사용자 입력 모드에서도 필요) */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    대상 학년\r\n                  </label>\r\n                  <select\r\n                    value={selectedGrade}\r\n                    onChange={(e) => setSelectedGrade(e.target.value)}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    {GRADE_OPTIONS.map(grade => (\r\n                      <option key={grade.value} value={grade.value}>\r\n                        {grade.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <button\r\n                  onClick={handleProcessUserInput}\r\n                  disabled={\r\n                    (inputType === 'paste' && !userText.trim()) ||\r\n                    (inputType === 'file' && !uploadedFile) ||\r\n                    (inputType === 'url' && !urlInput.trim())\r\n                  }\r\n                  className=\"w-full py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n                >\r\n                  {isProcessing ? (\r\n                    <span className=\"flex items-center justify-center\">\r\n                      <RefreshCw className=\"animate-spin mr-2\" />\r\n                      처리 중...\r\n                    </span>\r\n                  ) : (\r\n                    '지문 분석하기'\r\n                  )}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Step 2: 지문 분석 */}\r\n        {step === 2 && (\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n            <h2 className=\"text-2xl font-bold mb-6\">지문 분석</h2>\r\n            \r\n            {/* 지문 표시 */}\r\n            <TextDisplay \r\n              text={mode === 'generate' ? generatedText : userText}\r\n              title=\"읽기 지문\"\r\n              showCharCount={true}\r\n              editable={true}\r\n              onTextChange={handleTextEdit}\r\n            />\r\n\r\n            {/* 문해력 분석 */}\r\n            <div className=\"mb-6\">\r\n              <button\r\n                onClick={handleAnalyzeText}\r\n                disabled={analyzing}\r\n                className=\"mb-4 px-6 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {analyzing ? (\r\n                  <span className=\"flex items-center\">\r\n                    <RefreshCw className=\"animate-spin mr-2\" />\r\n                    분석 중...\r\n                  </span>\r\n                ) : (\r\n                  '문해력 난이도 분석'\r\n                )}\r\n              </button>\r\n\r\n              {analysisResult && <AnalysisChart analysisResult={analysisResult} />}\r\n            </div>\r\n\r\n            {/* 핵심 어휘 추출 */}\r\n            <div className=\"mb-6\">\r\n              <VocabularyExtractor\r\n                text={mode === 'generate' ? generatedText : userText}\r\n                gradeLevel={selectedGrade}\r\n                onVocabularyChange={handleVocabularyChange}\r\n              />\r\n            </div>\r\n\r\n            {/* 문해력 문제 생성 */}\r\n            <div className=\"mb-6\">\r\n              <ProblemGenerator\r\n                text={mode === 'generate' ? generatedText : userText}\r\n                gradeLevel={selectedGrade}\r\n                onProblemsChange={handleProblemsChange}\r\n              />\r\n            </div>\r\n\r\n            {/* 다음 단계 버튼 */}\r\n            <div className=\"flex justify-between\">\r\n              <button\r\n                onClick={() => setStep(1)}\r\n                className=\"px-6 py-2 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors\"\r\n              >\r\n                이전 단계\r\n              </button>\r\n              <button\r\n                onClick={generateProblems}\r\n                disabled={generatingProblems}\r\n                className=\"px-6 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {generatingProblems ? (\r\n                  <span className=\"flex items-center\">\r\n                    <RefreshCw className=\"animate-spin mr-2\" />\r\n                    문제 생성 중...\r\n                  </span>\r\n                ) : (\r\n                  '문제 생성하기'\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Step 3: 문제 풀이 */}\r\n        {step === 3 && (\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n            <h2 className=\"text-2xl font-bold mb-6\">문해력 훈련 문제</h2>\r\n            \r\n            {/* 어휘 문제 */}\r\n            <div className=\"mb-8\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">어휘 이해 문제</h3>\r\n              {vocabularyProblems.map((problem, index) => (\r\n                <ProblemCard \r\n                  key={problem.id}\r\n                  problem={problem}\r\n                  index={index}\r\n                  type=\"vocab\"\r\n                />\r\n              ))}\r\n            </div>\r\n\r\n            {/* 독해 문제 */}\r\n            <div className=\"mb-8\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">독해 이해 문제</h3>\r\n              {readingProblems.map((problem, index) => (\r\n                <ProblemCard \r\n                  key={problem.id}\r\n                  problem={problem}\r\n                  index={index}\r\n                  type=\"reading\"\r\n                />\r\n              ))}\r\n            </div>\r\n\r\n            {/* PDF 다운로드 버튼 */}\r\n            <div className=\"flex justify-between\">\r\n              <button\r\n                onClick={() => setStep(2)}\r\n                className=\"px-6 py-2 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors\"\r\n              >\r\n                이전 단계\r\n              </button>\r\n              <button\r\n                onClick={handlePDFDownload}\r\n                className=\"flex items-center px-6 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors\"\r\n              >\r\n                <Download className=\"mr-2\" />\r\n                PDF로 다운로드\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}","import { useState, useCallback } from 'react'\r\nimport aiService from '../services/aiService'\r\n\r\n/**\r\n * 텍스트 분석을 위한 커스텀 훅\r\n * @returns {Object} 텍스트 분석 관련 상태와 함수\r\n */\r\nexport function useTextAnalysis() {\r\n  const [analysisResult, setAnalysisResult] = useState(null)\r\n  const [analyzing, setAnalyzing] = useState(false)\r\n  \r\n  // 간단한 문해력 분석 함수\r\n  const analyzeReadingLevelLocal = useCallback((text) => {\r\n    const charCount = text.length\r\n    const sentences = text.split(/[.!?]/).filter(s => s.trim())\r\n    const sentenceCount = sentences.length || 1\r\n    const avgSentenceLength = charCount / sentenceCount\r\n    \r\n    const wordCount = text.split(/\\s+/).filter(word => word.length > 0).length\r\n    const avgWordLength = charCount / (wordCount || 1)\r\n    \r\n    return {\r\n      textLength: Math.min(10, Math.round(charCount / 200)),\r\n      vocabularyLevel: Math.min(10, Math.round(avgWordLength * 2)),\r\n      sentenceComplexity: Math.min(10, Math.round(avgSentenceLength / 10)),\r\n      contentLevel: Math.min(10, 7),\r\n      backgroundKnowledge: Math.min(10, 5),\r\n      totalScore: Math.round((charCount / 200 + avgWordLength * 2 + avgSentenceLength / 10 + 7 + 5) / 5)\r\n    }\r\n  }, [])\r\n  \r\n  // AI 기반 텍스트 분석\r\n  const analyzeText = useCallback(async (text, gradeLevel) => {\r\n    setAnalyzing(true)\r\n    \r\n    try {\r\n      const response = await aiService.analyzeReadingLevel(text, gradeLevel)\r\n      \r\n      if (response.success) {\r\n        setAnalysisResult(response.content)\r\n        return response.content\r\n      } else {\r\n        // 실패 시 로컬 분석 사용\r\n        const localAnalysis = analyzeReadingLevelLocal(text)\r\n        setAnalysisResult(localAnalysis)\r\n        return localAnalysis\r\n      }\r\n    } catch (error) {\r\n      console.error('분석 오류:', error)\r\n      // 오류 시 로컬 분석 사용\r\n      const localAnalysis = analyzeReadingLevelLocal(text)\r\n      setAnalysisResult(localAnalysis)\r\n      return localAnalysis\r\n    } finally {\r\n      setAnalyzing(false)\r\n    }\r\n  }, [analyzeReadingLevelLocal])\r\n  \r\n  const resetAnalysis = useCallback(() => {\r\n    setAnalysisResult(null)\r\n    setAnalyzing(false)\r\n  }, [])\r\n  \r\n  return {\r\n    analysisResult,\r\n    analyzing,\r\n    analyzeText,\r\n    resetAnalysis\r\n  }\r\n}","import { useState, useCallback, useRef } from 'react'\r\n\r\n/**\r\n * API 호출을 위한 커스텀 훅\r\n * @param {Function} apiFunction - 호출할 API 함수\r\n * @returns {Object} API 호출 상태와 함수\r\n */\r\nexport function useApiCall(apiFunction) {\r\n  const [data, setData] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const abortControllerRef = useRef(null)\r\n\r\n  const execute = useCallback(async (...args) => {\r\n    // 이전 요청이 진행 중이면 취소\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort()\r\n    }\r\n    \r\n    abortControllerRef.current = new AbortController()\r\n    setLoading(true)\r\n    setError(null)\r\n    \r\n    try {\r\n      const result = await apiFunction(...args, { signal: abortControllerRef.current.signal })\r\n      setData(result)\r\n      return result\r\n    } catch (err) {\r\n      if (err.name === 'AbortError') {\r\n        return // 요청이 취소된 경우 에러 처리하지 않음\r\n      }\r\n      const errorMessage = err.response?.data?.message || err.message || '알 수 없는 오류가 발생했습니다'\r\n      setError(errorMessage)\r\n      throw err\r\n    } finally {\r\n      setLoading(false)\r\n      abortControllerRef.current = null\r\n    }\r\n  }, [apiFunction])\r\n\r\n  const reset = useCallback(() => {\r\n    setData(null)\r\n    setError(null)\r\n    setLoading(false)\r\n  }, [])\r\n\r\n  return { data, loading, error, execute, reset }\r\n}\r\n\r\n/**\r\n * 여러 API 호출을 병렬로 처리하는 커스텀 훅\r\n * @returns {Object} 병렬 API 호출 함수와 상태\r\n */\r\nexport function useParallelApiCalls() {\r\n  const [loading, setLoading] = useState(false)\r\n  const [errors, setErrors] = useState([])\r\n\r\n  const executeAll = useCallback(async (apiCalls) => {\r\n    setLoading(true)\r\n    setErrors([])\r\n    \r\n    try {\r\n      const results = await Promise.allSettled(apiCalls)\r\n      \r\n      const successResults = []\r\n      const failedResults = []\r\n      \r\n      results.forEach((result, index) => {\r\n        if (result.status === 'fulfilled') {\r\n          successResults.push(result.value)\r\n        } else {\r\n          failedResults.push({\r\n            index,\r\n            error: result.reason?.message || '알 수 없는 오류'\r\n          })\r\n        }\r\n      })\r\n      \r\n      if (failedResults.length > 0) {\r\n        setErrors(failedResults)\r\n      }\r\n      \r\n      return { \r\n        success: successResults, \r\n        failed: failedResults,\r\n        hasErrors: failedResults.length > 0\r\n      }\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  return { loading, errors, executeAll }\r\n}","// 유효성 검사 유틸리티\r\nimport { CONSTANTS } from './constants'\r\n\r\n/**\r\n * 텍스트 길이 유효성 검사\r\n * @param {string} text - 검사할 텍스트\r\n * @param {number} minLength - 최소 길이\r\n * @param {number} maxLength - 최대 길이\r\n * @returns {object} 유효성 검사 결과\r\n */\r\nexport const validateTextLength = (text, minLength = CONSTANTS.TEXT_LENGTH.MIN, maxLength = CONSTANTS.TEXT_LENGTH.MAX) => {\r\n  if (!text || text.trim().length === 0) {\r\n    return {\r\n      isValid: false,\r\n      error: CONSTANTS.ERROR_MESSAGES.EMPTY_TEXT\r\n    }\r\n  }\r\n\r\n  const length = text.trim().length\r\n\r\n  if (length < minLength) {\r\n    return {\r\n      isValid: false,\r\n      error: `최소 ${minLength}자 이상 입력해주세요. (현재: ${length}자)`\r\n    }\r\n  }\r\n\r\n  if (length > maxLength) {\r\n    return {\r\n      isValid: false,\r\n      error: `최대 ${maxLength}자까지 입력 가능합니다. (현재: ${length}자)`\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    length\r\n  }\r\n}\r\n\r\n/**\r\n * 파일 유효성 검사\r\n * @param {File} file - 검사할 파일\r\n * @returns {object} 유효성 검사 결과\r\n */\r\nexport const validateFile = (file) => {\r\n  if (!file) {\r\n    return {\r\n      isValid: false,\r\n      error: '파일을 선택해주세요.'\r\n    }\r\n  }\r\n\r\n  // 파일 크기 확인\r\n  if (file.size > CONSTANTS.FILE_UPLOAD.MAX_SIZE) {\r\n    return {\r\n      isValid: false,\r\n      error: CONSTANTS.ERROR_MESSAGES.FILE_SIZE\r\n    }\r\n  }\r\n\r\n  // 파일 타입 확인\r\n  const fileExtension = '.' + file.name.split('.').pop().toLowerCase()\r\n  if (!CONSTANTS.FILE_UPLOAD.ACCEPTED_TYPES.includes(fileExtension)) {\r\n    return {\r\n      isValid: false,\r\n      error: `${CONSTANTS.ERROR_MESSAGES.FILE_TYPE} 지원 형식: ${CONSTANTS.FILE_UPLOAD.ACCEPTED_TYPES.join(', ')}`\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    fileType: fileExtension,\r\n    fileName: file.name,\r\n    fileSize: file.size\r\n  }\r\n}\r\n\r\n/**\r\n * URL 유효성 검사\r\n * @param {string} url - 검사할 URL\r\n * @returns {object} 유효성 검사 결과\r\n */\r\nexport const validateURL = (url) => {\r\n  if (!url || url.trim().length === 0) {\r\n    return {\r\n      isValid: false,\r\n      error: 'URL을 입력해주세요.'\r\n    }\r\n  }\r\n\r\n  try {\r\n    const urlObj = new URL(url)\r\n    if (!['http:', 'https:'].includes(urlObj.protocol)) {\r\n      return {\r\n        isValid: false,\r\n        error: '올바른 URL 형식이 아닙니다. (http:// 또는 https://로 시작해야 합니다)'\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isValid: false,\r\n      error: '올바른 URL 형식이 아닙니다.'\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    url: url.trim()\r\n  }\r\n}\r\n\r\n/**\r\n * 문제 개수 유효성 검사\r\n * @param {number} count - 문제 개수\r\n * @param {string} type - 문제 유형 ('vocabulary' or 'reading')\r\n * @returns {object} 유효성 검사 결과\r\n */\r\nexport const validateProblemCount = (count, type) => {\r\n  const limits = type === 'vocabulary' \r\n    ? CONSTANTS.PROBLEM_COUNT.VOCABULARY \r\n    : CONSTANTS.PROBLEM_COUNT.READING\r\n\r\n  if (!count || count < limits.MIN) {\r\n    return {\r\n      isValid: false,\r\n      error: `최소 ${limits.MIN}개 이상 선택해주세요.`\r\n    }\r\n  }\r\n\r\n  if (count > limits.MAX) {\r\n    return {\r\n      isValid: false,\r\n      error: `최대 ${limits.MAX}개까지 선택 가능합니다.`\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    count\r\n  }\r\n}\r\n\r\n/**\r\n * 커스텀 길이 유효성 검사\r\n * @param {string} lengthStr - 입력된 길이 문자열\r\n * @returns {object} 유효성 검사 결과\r\n */\r\nexport const validateCustomLength = (lengthStr) => {\r\n  const length = parseInt(lengthStr, 10)\r\n\r\n  if (isNaN(length)) {\r\n    return {\r\n      isValid: false,\r\n      error: '숫자를 입력해주세요.'\r\n    }\r\n  }\r\n\r\n  if (length < CONSTANTS.TEXT_LENGTH.MIN) {\r\n    return {\r\n      isValid: false,\r\n      error: `최소 ${CONSTANTS.TEXT_LENGTH.MIN}자 이상 입력해주세요.`\r\n    }\r\n  }\r\n\r\n  if (length > CONSTANTS.TEXT_LENGTH.MAX) {\r\n    return {\r\n      isValid: false,\r\n      error: `최대 ${CONSTANTS.TEXT_LENGTH.MAX}자까지 입력 가능합니다.`\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    length\r\n  }\r\n}","import { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Lock, User } from 'lucide-react'\r\nimport { config } from '../config'\r\n\r\nexport default function AdminLogin() {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const navigate = useNavigate()\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError('')\r\n\r\n    try {\r\n      const response = await fetch(config.endpoints.adminLogin, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (data.success && data.token) {\r\n        localStorage.setItem('adminToken', data.token)\r\n        localStorage.setItem('isAdmin', 'true')\r\n        navigate('/admin')\r\n      } else {\r\n        setError(data.error || '이메일 또는 비밀번호가 올바르지 않습니다.')\r\n      }\r\n    } catch (err) {\r\n      console.error('Login error:', err)\r\n      setError('로그인 중 오류가 발생했습니다.')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\r\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <div className=\"flex justify-center\">\r\n          <Lock className=\"h-12 w-12 text-indigo-600\" />\r\n        </div>\r\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n          관리자 로그인\r\n        </h2>\r\n        <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n          EduText Pro 관리 시스템에 로그인하세요\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\r\n          <form className=\"space-y-6\" onSubmit={handleLogin}>\r\n            <div>\r\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\r\n                이메일\r\n              </label>\r\n              <div className=\"mt-1 relative\">\r\n                <input\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  autoComplete=\"email\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  className=\"appearance-none block w-full px-3 py-2 pl-10 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n                  placeholder=\"admin@inblanq.com\"\r\n                />\r\n                <User className=\"h-5 w-5 text-gray-400 absolute left-3 top-2.5\" />\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\r\n                비밀번호\r\n              </label>\r\n              <div className=\"mt-1 relative\">\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"appearance-none block w-full px-3 py-2 pl-10 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n                  placeholder=\"••••••••\"\r\n                />\r\n                <Lock className=\"h-5 w-5 text-gray-400 absolute left-3 top-2.5\" />\r\n              </div>\r\n            </div>\r\n\r\n            {error && (\r\n              <div className=\"text-red-600 text-sm\">{error}</div>\r\n            )}\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\r\n              >\r\n                {isLoading ? '로그인 중...' : '로그인'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <div className=\"mt-6\">\r\n            <div className=\"text-center\">\r\n              <button\r\n                onClick={() => navigate('/')}\r\n                className=\"text-indigo-600 hover:text-indigo-500 text-sm\"\r\n              >\r\n                메인 페이지로 돌아가기\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { BarChart3, Users, FileText, Settings, LogOut } from 'lucide-react'\r\n\r\nexport default function AdminDashboard() {\r\n  const [stats, setStats] = useState({\r\n    totalUsers: 1245,\r\n    totalContent: 567,\r\n    todayGenerated: 89,\r\n    activeUsers: 234\r\n  })\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    // 관리자 권한 확인\r\n    const isAdmin = localStorage.getItem('isAdmin')\r\n    if (!isAdmin) {\r\n      navigate('/admin/login')\r\n    }\r\n  }, [navigate])\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('isAdmin')\r\n    navigate('/')\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Header */}\r\n      <header className=\"bg-white shadow\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex justify-between items-center py-6\">\r\n            <div className=\"flex items-center\">\r\n              <BarChart3 className=\"h-8 w-8 text-indigo-600\" />\r\n              <h1 className=\"ml-2 text-2xl font-bold text-gray-900\">EduText Pro 관리자</h1>\r\n            </div>\r\n            <button\r\n              onClick={handleLogout}\r\n              className=\"flex items-center text-gray-500 hover:text-gray-900\"\r\n            >\r\n              <LogOut className=\"h-5 w-5 mr-1\" />\r\n              로그아웃\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Stats Grid */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">총 사용자</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalUsers.toLocaleString()}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <FileText className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">생성된 콘텐츠</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalContent.toLocaleString()}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <BarChart3 className=\"h-8 w-8 text-yellow-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">오늘 생성</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.todayGenerated}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-purple-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">활성 사용자</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.activeUsers}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content Management */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <div className=\"bg-white rounded-lg shadow\">\r\n            <div className=\"px-6 py-4 border-b border-gray-200\">\r\n              <h3 className=\"text-lg font-medium text-gray-900\">최근 생성된 콘텐츠</h3>\r\n            </div>\r\n            <div className=\"p-6\">\r\n              <div className=\"space-y-4\">\r\n                {[\r\n                  { title: '수학 기초 개념', user: '홍길동', time: '5분 전' },\r\n                  { title: '영어 문법 정리', user: '김철수', time: '15분 전' },\r\n                  { title: '과학 실험 가이드', user: '이영희', time: '30분 전' },\r\n                  { title: '역사 연표 정리', user: '박민수', time: '1시간 전' }\r\n                ].map((item, index) => (\r\n                  <div key={index} className=\"flex justify-between items-center\">\r\n                    <div>\r\n                      <p className=\"font-medium text-gray-900\">{item.title}</p>\r\n                      <p className=\"text-sm text-gray-500\">{item.user}</p>\r\n                    </div>\r\n                    <span className=\"text-sm text-gray-400\">{item.time}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-lg shadow\">\r\n            <div className=\"px-6 py-4 border-b border-gray-200\">\r\n              <h3 className=\"text-lg font-medium text-gray-900\">시스템 설정</h3>\r\n            </div>\r\n            <div className=\"p-6\">\r\n              <div className=\"space-y-4\">\r\n                <button className=\"flex items-center w-full text-left p-3 rounded-lg hover:bg-gray-50\">\r\n                  <Settings className=\"h-5 w-5 text-gray-400 mr-3\" />\r\n                  <span>일반 설정</span>\r\n                </button>\r\n                <button className=\"flex items-center w-full text-left p-3 rounded-lg hover:bg-gray-50\">\r\n                  <Users className=\"h-5 w-5 text-gray-400 mr-3\" />\r\n                  <span>사용자 관리</span>\r\n                </button>\r\n                <button className=\"flex items-center w-full text-left p-3 rounded-lg hover:bg-gray-50\">\r\n                  <FileText className=\"h-5 w-5 text-gray-400 mr-3\" />\r\n                  <span>콘텐츠 관리</span>\r\n                </button>\r\n                <button className=\"flex items-center w-full text-left p-3 rounded-lg hover:bg-gray-50\">\r\n                  <BarChart3 className=\"h-5 w-5 text-gray-400 mr-3\" />\r\n                  <span>분석 및 리포트</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { createClient } from '@supabase/supabase-js'\r\nimport { config } from '../config'\r\n\r\n// Supabase 클라이언트 생성\r\nexport const supabase = createClient(config.supabase.url, config.supabase.anonKey)","import React, { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabase'\r\n\r\nconst TemplateManager = () => {\r\n  const [templates, setTemplates] = useState([])\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [editingTemplate, setEditingTemplate] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    fetchTemplates()\r\n  }, [])\r\n\r\n  const fetchTemplates = async () => {\r\n    try {\r\n      const token = localStorage.getItem('adminToken')\r\n      const response = await fetch('/api/admin/templates', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n      const data = await response.json()\r\n      if (data.success) {\r\n        setTemplates(data.templates)\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch templates:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleEdit = (template) => {\r\n    setEditingTemplate(template)\r\n    setShowModal(true)\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    if (!confirm('정말 이 템플릿을 삭제하시겠습니까?')) return\r\n\r\n    try {\r\n      const token = localStorage.getItem('adminToken')\r\n      const response = await fetch(`/api/admin/templates/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n      \r\n      if (response.ok) {\r\n        fetchTemplates()\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete template:', error)\r\n    }\r\n  }\r\n\r\n  if (loading) {\r\n    return <div className=\"flex justify-center items-center h-64\">로딩 중...</div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h2 className=\"text-2xl font-bold\">템플릿 관리</h2>\r\n        <button\r\n          onClick={() => {\r\n            setEditingTemplate(null)\r\n            setShowModal(true)\r\n          }}\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\r\n        >\r\n          새 템플릿 추가\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {templates.map(template => (\r\n          <TemplateCard\r\n            key={template.id}\r\n            template={template}\r\n            onEdit={handleEdit}\r\n            onDelete={handleDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {showModal && (\r\n        <TemplateModal\r\n          template={editingTemplate}\r\n          onClose={() => setShowModal(false)}\r\n          onSave={() => {\r\n            setShowModal(false)\r\n            fetchTemplates()\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TemplateCard = ({ template, onEdit, onDelete }) => {\r\n  const contentTypeLabels = {\r\n    reading: '읽기 지문',\r\n    vocabulary: '어휘 학습',\r\n    grammar: '문법 설명',\r\n    quiz: '퀴즈',\r\n    questions: '문제',\r\n    answers: '해설'\r\n  }\r\n\r\n  const difficultyLabels = {\r\n    beginner: '초급',\r\n    intermediate: '중급',\r\n    advanced: '고급'\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow\">\r\n      <h3 className=\"font-bold text-lg mb-2\">{template.title}</h3>\r\n      <div className=\"space-y-2 text-sm text-gray-600\">\r\n        <p>타입: {contentTypeLabels[template.content_type]}</p>\r\n        <p>난이도: {difficultyLabels[template.difficulty]}</p>\r\n        <p>대상: {template.target_age}</p>\r\n      </div>\r\n      <div className=\"mt-4 flex justify-end space-x-2\">\r\n        <button\r\n          onClick={() => onEdit(template)}\r\n          className=\"text-blue-600 hover:text-blue-800\"\r\n        >\r\n          수정\r\n        </button>\r\n        <button\r\n          onClick={() => onDelete(template.id)}\r\n          className=\"text-red-600 hover:text-red-800\"\r\n        >\r\n          삭제\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TemplateModal = ({ template, onClose, onSave }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: template?.title || '',\r\n    content_type: template?.content_type || 'reading',\r\n    difficulty: template?.difficulty || 'intermediate',\r\n    target_age: template?.target_age || 'adult',\r\n    template_prompt: template?.template_prompt || '',\r\n    variables: template?.variables || []\r\n  })\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    \r\n    try {\r\n      const token = localStorage.getItem('adminToken')\r\n      const url = template \r\n        ? `/api/admin/templates/${template.id}`\r\n        : '/api/admin/templates'\r\n      \r\n      const response = await fetch(url, {\r\n        method: template ? 'PUT' : 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(formData)\r\n      })\r\n\r\n      if (response.ok) {\r\n        onSave()\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save template:', error)\r\n    }\r\n  }\r\n\r\n  const addVariable = () => {\r\n    setFormData({\r\n      ...formData,\r\n      variables: [...formData.variables, { name: '', description: '' }]\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4\">\r\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-90vh overflow-y-auto p-6\">\r\n        <h3 className=\"text-xl font-bold mb-4\">\r\n          {template ? '템플릿 수정' : '새 템플릿 생성'}\r\n        </h3>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">템플릿 이름</label>\r\n            <input\r\n              type=\"text\"\r\n              value={formData.title}\r\n              onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n              className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">콘텐츠 타입</label>\r\n            <select\r\n              value={formData.content_type}\r\n              onChange={(e) => setFormData({ ...formData, content_type: e.target.value })}\r\n              className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"reading\">읽기 지문</option>\r\n              <option value=\"vocabulary\">어휘 학습</option>\r\n              <option value=\"grammar\">문법 설명</option>\r\n              <option value=\"quiz\">퀴즈</option>\r\n              <option value=\"questions\">문제</option>\r\n              <option value=\"answers\">해설</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">난이도</label>\r\n            <select\r\n              value={formData.difficulty}\r\n              onChange={(e) => setFormData({ ...formData, difficulty: e.target.value })}\r\n              className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"beginner\">초급</option>\r\n              <option value=\"intermediate\">중급</option>\r\n              <option value=\"advanced\">고급</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">대상 연령</label>\r\n            <input\r\n              type=\"text\"\r\n              value={formData.target_age}\r\n              onChange={(e) => setFormData({ ...formData, target_age: e.target.value })}\r\n              className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              placeholder=\"예: adult, elem1, middle2\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">프롬프트 템플릿</label>\r\n            <textarea\r\n              value={formData.template_prompt}\r\n              onChange={(e) => setFormData({ ...formData, template_prompt: e.target.value })}\r\n              className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              rows={8}\r\n              placeholder=\"{{topic}} 주제로 {{difficulty}} 수준의 한국어 읽기 지문을 {{length}}자로 작성해주세요...\"\r\n              required\r\n            />\r\n            <p className=\"text-sm text-gray-600 mt-1\">\r\n              변수는 {'{{변수명}}'} 형식으로 작성하세요.\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <label className=\"block text-sm font-medium\">변수 정의</label>\r\n              <button\r\n                type=\"button\"\r\n                onClick={addVariable}\r\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\r\n              >\r\n                변수 추가\r\n              </button>\r\n            </div>\r\n            {formData.variables.map((variable, index) => (\r\n              <div key={index} className=\"flex space-x-2 mb-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"변수명\"\r\n                  value={variable.name}\r\n                  onChange={(e) => {\r\n                    const newVars = [...formData.variables]\r\n                    newVars[index].name = e.target.value\r\n                    setFormData({ ...formData, variables: newVars })\r\n                  }}\r\n                  className=\"flex-1 px-3 py-2 border rounded-lg\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"설명\"\r\n                  value={variable.description}\r\n                  onChange={(e) => {\r\n                    const newVars = [...formData.variables]\r\n                    newVars[index].description = e.target.value\r\n                    setFormData({ ...formData, variables: newVars })\r\n                  }}\r\n                  className=\"flex-1 px-3 py-2 border rounded-lg\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const newVars = formData.variables.filter((_, i) => i !== index)\r\n                    setFormData({ ...formData, variables: newVars })\r\n                  }}\r\n                  className=\"text-red-600 hover:text-red-800\"\r\n                >\r\n                  삭제\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\r\n            >\r\n              취소\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n            >\r\n              {template ? '수정' : '생성'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TemplateManager","import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { config, apiFetch } from '../../config'\r\n\r\nconst ContentGenerator = () => {\r\n  const [templates, setTemplates] = useState([])\r\n  const [selectedTemplate, setSelectedTemplate] = useState(null)\r\n  const [variables, setVariables] = useState({})\r\n  const [provider, setProvider] = useState('claude')\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n  const [generatedContent, setGeneratedContent] = useState(null)\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    fetchTemplates()\r\n  }, [])\r\n\r\n  const fetchTemplates = async () => {\r\n    try {\r\n      const response = await apiFetch(config.endpoints.adminTemplates)\r\n      const data = await response.json()\r\n      if (data.success) {\r\n        setTemplates(data.templates)\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch templates:', error)\r\n    }\r\n  }\r\n\r\n  const handleTemplateSelect = (templateId) => {\r\n    const template = templates.find(t => t.id === templateId)\r\n    setSelectedTemplate(template)\r\n    \r\n    // 변수 초기화\r\n    if (template) {\r\n      const vars = {}\r\n      template.variables?.forEach(v => {\r\n        vars[v.name] = ''\r\n      })\r\n      setVariables(vars)\r\n    }\r\n  }\r\n\r\n  const handleGenerate = async () => {\r\n    if (!selectedTemplate) {\r\n      alert('템플릿을 선택해주세요')\r\n      return\r\n    }\r\n\r\n    setIsGenerating(true)\r\n    try {\r\n      const response = await apiFetch(config.endpoints.generateFromTemplate, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          templateId: selectedTemplate.id,\r\n          variables,\r\n          provider\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json()\r\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      if (data.success) {\r\n        setGeneratedContent(data)\r\n      } else {\r\n        alert('AI 생성에 실패했습니다: ' + (data.error || data.message))\r\n      }\r\n    } catch (error) {\r\n      console.error('Generation error:', error)\r\n      alert('AI 생성에 실패했습니다: ' + error.message)\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }\r\n\r\n  const openInEditor = () => {\r\n    // 생성된 콘텐츠를 세션 스토리지에 저장\r\n    sessionStorage.setItem('generatedContent', JSON.stringify(generatedContent.content))\r\n    navigate('/editor?mode=new&content=generated')\r\n  }\r\n\r\n  const copyToClipboard = () => {\r\n    const text = typeof generatedContent.content === 'string' \r\n      ? generatedContent.content \r\n      : JSON.stringify(generatedContent.content, null, 2)\r\n    \r\n    navigator.clipboard.writeText(text)\r\n    alert('클립보드에 복사되었습니다')\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-6xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">지문 즉시 생성</h2>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* 왼쪽: 설정 영역 */}\r\n        <div className=\"space-y-6\">\r\n          {/* AI 제공자 선택 */}\r\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\r\n            <h3 className=\"font-semibold mb-3\">AI 제공자</h3>\r\n            <div className=\"flex space-x-4\">\r\n              <label className=\"flex items-center\">\r\n                <input\r\n                  type=\"radio\"\r\n                  value=\"claude\"\r\n                  checked={provider === 'claude'}\r\n                  onChange={(e) => setProvider(e.target.value)}\r\n                  className=\"mr-2\"\r\n                />\r\n                Claude 3.5 Sonnet\r\n              </label>\r\n              <label className=\"flex items-center\">\r\n                <input\r\n                  type=\"radio\"\r\n                  value=\"gemini\"\r\n                  checked={provider === 'gemini'}\r\n                  onChange={(e) => setProvider(e.target.value)}\r\n                  className=\"mr-2\"\r\n                />\r\n                Google Gemini\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 템플릿 선택 */}\r\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\r\n            <h3 className=\"font-semibold mb-3\">템플릿 선택</h3>\r\n            <select\r\n              value={selectedTemplate?.id || ''}\r\n              onChange={(e) => handleTemplateSelect(e.target.value)}\r\n              className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"\">템플릿을 선택하세요</option>\r\n              {templates.map(template => (\r\n                <option key={template.id} value={template.id}>\r\n                  {template.title} ({template.content_type})\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            {selectedTemplate && (\r\n              <div className=\"mt-3 p-3 bg-gray-50 rounded text-sm\">\r\n                <p><strong>타입:</strong> {selectedTemplate.content_type}</p>\r\n                <p><strong>난이도:</strong> {selectedTemplate.difficulty}</p>\r\n                <p><strong>대상:</strong> {selectedTemplate.target_age}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 변수 입력 */}\r\n          {selectedTemplate && selectedTemplate.variables?.length > 0 && (\r\n            <div className=\"bg-white rounded-lg shadow-md p-4\">\r\n              <h3 className=\"font-semibold mb-3\">변수 입력</h3>\r\n              <div className=\"space-y-3\">\r\n                {selectedTemplate.variables.map(variable => (\r\n                  <div key={variable.name}>\r\n                    <label className=\"block text-sm font-medium mb-1\">\r\n                      {variable.name}\r\n                      {variable.description && (\r\n                        <span className=\"text-gray-500 font-normal ml-2\">\r\n                          ({variable.description})\r\n                        </span>\r\n                      )}\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={variables[variable.name] || ''}\r\n                      onChange={(e) => setVariables({\r\n                        ...variables,\r\n                        [variable.name]: e.target.value\r\n                      })}\r\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* 생성 버튼 */}\r\n          <button\r\n            onClick={handleGenerate}\r\n            disabled={!selectedTemplate || isGenerating}\r\n            className={`w-full py-3 px-4 rounded-lg font-semibold transition-colors ${\r\n              !selectedTemplate || isGenerating\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {isGenerating ? (\r\n              <div className=\"flex items-center justify-center\">\r\n                <svg className=\"animate-spin h-5 w-5 mr-3\" viewBox=\"0 0 24 24\">\r\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" />\r\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\r\n                </svg>\r\n                생성 중...\r\n              </div>\r\n            ) : (\r\n              '지문 생성하기'\r\n            )}\r\n          </button>\r\n        </div>\r\n\r\n        {/* 오른쪽: 결과 영역 */}\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n          <h3 className=\"font-semibold mb-3\">생성된 콘텐츠</h3>\r\n          \r\n          {generatedContent ? (\r\n            <div className=\"space-y-4\">\r\n              {/* 메타데이터 */}\r\n              <div className=\"bg-gray-50 rounded p-3 text-sm\">\r\n                <p><strong>AI 제공자:</strong> {generatedContent.metadata.provider}</p>\r\n                <p><strong>토큰 사용:</strong> {generatedContent.metadata.tokensUsed}</p>\r\n                <p><strong>생성 시간:</strong> {generatedContent.metadata.generationTime}ms</p>\r\n                <p><strong>템플릿:</strong> {generatedContent.metadata.templateUsed}</p>\r\n              </div>\r\n\r\n              {/* 콘텐츠 미리보기 */}\r\n              <div className=\"border rounded-lg p-4 max-h-96 overflow-y-auto\">\r\n                {renderContent(generatedContent.content)}\r\n              </div>\r\n\r\n              {/* 액션 버튼 */}\r\n              <div className=\"flex space-x-3\">\r\n                <button\r\n                  onClick={copyToClipboard}\r\n                  className=\"flex-1 py-2 px-4 border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n                >\r\n                  클립보드에 복사\r\n                </button>\r\n                <button\r\n                  onClick={openInEditor}\r\n                  className=\"flex-1 py-2 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n                >\r\n                  에디터에서 열기\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center text-gray-500 py-20\">\r\n              템플릿을 선택하고 생성 버튼을 클릭하세요\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// 콘텐츠 렌더링 함수\r\nfunction renderContent(content) {\r\n  if (typeof content === 'string') {\r\n    return <pre className=\"whitespace-pre-wrap font-sans\">{content}</pre>\r\n  }\r\n\r\n  if (content.title) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <h4 className=\"text-lg font-bold\">{content.title}</h4>\r\n        {content.description && <p className=\"text-gray-600\">{content.description}</p>}\r\n        \r\n        {content.mainContent && (\r\n          <div className=\"space-y-2\">\r\n            <p>{content.mainContent.introduction}</p>\r\n            {content.mainContent.keyPoints && (\r\n              <ul className=\"list-disc list-inside\">\r\n                {content.mainContent.keyPoints.map((point, idx) => (\r\n                  <li key={idx}>{point}</li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {content.vocabularyList && (\r\n          <div className=\"space-y-2\">\r\n            {content.vocabularyList.map((vocab, idx) => (\r\n              <div key={idx} className=\"border-b pb-2\">\r\n                <p><strong>{vocab.word}</strong>: {vocab.meaning}</p>\r\n                <p className=\"text-sm text-gray-600\">난이도: {vocab.difficulty}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {content.questions && (\r\n          <div className=\"space-y-3\">\r\n            {content.questions.map((q, idx) => (\r\n              <div key={idx} className=\"bg-gray-50 p-3 rounded\">\r\n                <p className=\"font-medium\">{idx + 1}. {q.question}</p>\r\n                <p className=\"text-sm text-gray-600\">({q.type}, {q.points}점)</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return <pre className=\"whitespace-pre-wrap text-sm\">{JSON.stringify(content, null, 2)}</pre>\r\n}\r\n\r\nexport default ContentGenerator","import { useState, useEffect } from 'react'\r\nimport { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport { BarChart3, Users, FileText, Settings, LogOut, FileCode, Sparkles, History, BarChart } from 'lucide-react'\r\nimport TemplateManager from '../components/Admin/TemplateManager'\r\nimport ContentGenerator from '../components/Admin/ContentGenerator'\r\n\r\nexport default function AdminDashboardWithRoutes() {\r\n  const [stats, setStats] = useState({\r\n    totalUsers: 1245,\r\n    totalContent: 567,\r\n    todayGenerated: 89,\r\n    activeUsers: 234\r\n  })\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    // 관리자 권한 확인\r\n    const isAdmin = localStorage.getItem('isAdmin')\r\n    const adminToken = localStorage.getItem('adminToken')\r\n    if (!isAdmin && !adminToken) {\r\n      navigate('/admin/login')\r\n    }\r\n  }, [navigate])\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('isAdmin')\r\n    localStorage.removeItem('adminToken')\r\n    navigate('/')\r\n  }\r\n\r\n  const isActive = (path) => {\r\n    return location.pathname === path\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex\">\r\n      {/* Sidebar */}\r\n      <div className=\"w-64 bg-white shadow-lg\">\r\n        <div className=\"p-6\">\r\n          <div className=\"flex items-center mb-8\">\r\n            <BarChart3 className=\"h-8 w-8 text-indigo-600\" />\r\n            <h2 className=\"ml-2 text-xl font-bold text-gray-900\">관리자 패널</h2>\r\n          </div>\r\n          \r\n          <nav className=\"space-y-2\">\r\n            <Link\r\n              to=\"/admin/dashboard\"\r\n              className={`flex items-center p-3 rounded-lg transition-colors ${\r\n                isActive('/admin/dashboard') ? 'bg-indigo-50 text-indigo-600' : 'text-gray-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <BarChart className=\"h-5 w-5 mr-3\" />\r\n              대시보드\r\n            </Link>\r\n            \r\n            <Link\r\n              to=\"/admin/templates\"\r\n              className={`flex items-center p-3 rounded-lg transition-colors ${\r\n                isActive('/admin/templates') ? 'bg-indigo-50 text-indigo-600' : 'text-gray-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <FileCode className=\"h-5 w-5 mr-3\" />\r\n              템플릿 관리\r\n            </Link>\r\n            \r\n            <Link\r\n              to=\"/admin/generate\"\r\n              className={`flex items-center p-3 rounded-lg transition-colors ${\r\n                isActive('/admin/generate') ? 'bg-indigo-50 text-indigo-600' : 'text-gray-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <Sparkles className=\"h-5 w-5 mr-3\" />\r\n              지문 생성\r\n            </Link>\r\n            \r\n            <Link\r\n              to=\"/admin/history\"\r\n              className={`flex items-center p-3 rounded-lg transition-colors ${\r\n                isActive('/admin/history') ? 'bg-indigo-50 text-indigo-600' : 'text-gray-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <History className=\"h-5 w-5 mr-3\" />\r\n              생성 히스토리\r\n            </Link>\r\n            \r\n            <Link\r\n              to=\"/admin/analytics\"\r\n              className={`flex items-center p-3 rounded-lg transition-colors ${\r\n                isActive('/admin/analytics') ? 'bg-indigo-50 text-indigo-600' : 'text-gray-600 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <BarChart3 className=\"h-5 w-5 mr-3\" />\r\n              사용 분석\r\n            </Link>\r\n          </nav>\r\n          \r\n          <div className=\"mt-8 pt-8 border-t\">\r\n            <button\r\n              onClick={handleLogout}\r\n              className=\"flex items-center w-full p-3 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors\"\r\n            >\r\n              <LogOut className=\"h-5 w-5 mr-3\" />\r\n              로그아웃\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1\">\r\n        <header className=\"bg-white shadow\">\r\n          <div className=\"px-8 py-6\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900\">EduText Pro 관리자</h1>\r\n          </div>\r\n        </header>\r\n\r\n        <main className=\"p-8\">\r\n          <Routes>\r\n            <Route path=\"dashboard\" element={<DashboardHome stats={stats} />} />\r\n            <Route path=\"templates\" element={<TemplateManager />} />\r\n            <Route path=\"generate\" element={<ContentGenerator />} />\r\n            <Route path=\"history\" element={<GenerationHistory />} />\r\n            <Route path=\"analytics\" element={<UsageAnalytics />} />\r\n            <Route path=\"*\" element={<DashboardHome stats={stats} />} />\r\n          </Routes>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Dashboard Home Component\r\nfunction DashboardHome({ stats }) {\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-semibold mb-6\">대시보드 개요</h2>\r\n      \r\n      {/* Stats Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <div className=\"flex items-center\">\r\n            <Users className=\"h-8 w-8 text-blue-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">총 사용자</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.totalUsers.toLocaleString()}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <div className=\"flex items-center\">\r\n            <FileText className=\"h-8 w-8 text-green-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">생성된 콘텐츠</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.totalContent.toLocaleString()}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <div className=\"flex items-center\">\r\n            <BarChart3 className=\"h-8 w-8 text-yellow-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">오늘 생성</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.todayGenerated}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <div className=\"flex items-center\">\r\n            <Users className=\"h-8 w-8 text-purple-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">활성 사용자</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.activeUsers}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Recent Activity */}\r\n      <div className=\"bg-white rounded-lg shadow\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <h3 className=\"text-lg font-medium text-gray-900\">최근 활동</h3>\r\n        </div>\r\n        <div className=\"p-6\">\r\n          <div className=\"space-y-4\">\r\n            {[\r\n              { title: '수학 기초 개념', user: '홍길동', time: '5분 전', type: 'reading' },\r\n              { title: '영어 문법 정리', user: '김철수', time: '15분 전', type: 'grammar' },\r\n              { title: '과학 실험 가이드', user: '이영희', time: '30분 전', type: 'quiz' },\r\n              { title: '역사 연표 정리', user: '박민수', time: '1시간 전', type: 'vocabulary' }\r\n            ].map((item, index) => (\r\n              <div key={index} className=\"flex justify-between items-center\">\r\n                <div>\r\n                  <p className=\"font-medium text-gray-900\">{item.title}</p>\r\n                  <p className=\"text-sm text-gray-500\">{item.user} • {item.type}</p>\r\n                </div>\r\n                <span className=\"text-sm text-gray-400\">{item.time}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Placeholder Components\r\nfunction GenerationHistory() {\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-semibold mb-6\">생성 히스토리</h2>\r\n      <div className=\"bg-white rounded-lg shadow p-6\">\r\n        <p className=\"text-gray-500\">생성 히스토리 기능이 곧 추가됩니다.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction UsageAnalytics() {\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-semibold mb-6\">사용 분석</h2>\r\n      <div className=\"bg-white rounded-lg shadow p-6\">\r\n        <p className=\"text-gray-500\">사용 분석 기능이 곧 추가됩니다.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\r\nimport { config } from './config'\r\nimport HomePage from './pages/HomePage'\r\nimport EditorPage from './pages/EditorPage'\r\nimport ReadingTrainerPage from './pages/ReadingTrainerPage'\r\nimport AdminLogin from './pages/AdminLogin'\r\nimport AdminDashboard from './pages/AdminDashboard'\r\nimport AdminDashboardWithRoutes from './pages/AdminDashboardWithRoutes'\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <Router basename={config.basename}>\r\n      <div className=\"min-h-screen bg-gray-50\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/editor\" element={<EditorPage />} />\r\n          <Route path=\"/reading-trainer\" element={<ReadingTrainerPage />} />\r\n          <Route path=\"/admin/login\" element={<AdminLogin />} />\r\n          <Route path=\"/admin\" element={<AdminDashboard />} />\r\n          <Route path=\"/admin/*\" element={<AdminDashboardWithRoutes />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App.jsx'\r\nimport './index.css'\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n)","// API Keys configuration\n// These should be set via environment variables\n\n// Safely access environment variables\nconst getEnvVar = (key) => {\n  try {\n    return import.meta.env?.[key] || ''\n  } catch {\n    return ''\n  }\n}\n\nexport const apiKeys = {\n  openai: getEnvVar('VITE_OPENAI_API_KEY'),\n  anthropic: getEnvVar('VITE_ANTHROPIC_API_KEY')\n}\n\n// Check if at least one API key is configured\nexport const hasApiKeys = () => {\n  // Always return true since we're using backend API\n  return true\n}\n\n// Get available AI providers based on API keys\nexport const getAvailableProviders = () => {\n  // Since we're using backend API, all providers are available\n  // The backend will handle the actual API keys\n  return [\n    { id: 'openai', name: 'OpenAI GPT' },\n    { id: 'anthropic', name: 'Anthropic Claude' },\n    { id: 'gemini', name: 'Google Gemini' }\n  ]\n}","// Unified configuration file\r\n// Force deployment update - 2025-08-02 15:00 - CACHE BUST\r\n// Using wonbyte-pro.onrender.com as backend - FORCE REBUILD v2\r\nconst isDevelopment = process.env.NODE_ENV === 'development'\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\n\r\n// API Configuration\r\n// Force correct backend URL - 2025-08-02 15:00\r\nconst API_URL = 'https://wonbyte-pro.onrender.com'\r\n\r\n// Supabase Configuration\r\nconst SUPABASE_URL = 'https://jqlouemxgafrbzdxyojl.supabase.co'\r\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpxbG91ZW14Z2FmcmJ6ZHh5b2psIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxMDE5ODgsImV4cCI6MjA2OTY3Nzk4OH0.lzd76e3ZeH5eq33G6V6FMbs5lDToV9tGDUIilAVDPYI'\r\n\r\n// GitHub Pages Configuration\r\nconst GITHUB_PAGES_BASENAME = '/'\r\n\r\nexport const config = {\r\n  // Environment\r\n  isDevelopment,\r\n  isProduction,\r\n  \r\n  // API Settings\r\n  apiUrl: API_URL,\r\n  demo: false,\r\n  \r\n  // Supabase Settings\r\n  supabase: {\r\n    url: SUPABASE_URL,\r\n    anonKey: SUPABASE_ANON_KEY\r\n  },\r\n  \r\n  // GitHub Pages\r\n  basename: GITHUB_PAGES_BASENAME,\r\n  \r\n  // API Endpoints\r\n  endpoints: {\r\n    // Admin endpoints\r\n    adminLogin: `${API_URL}/api/admin/login`,\r\n    adminStats: `${API_URL}/api/admin/stats`,\r\n    adminTemplates: `${API_URL}/api/admin/templates`,\r\n    \r\n    // AI Generation endpoints\r\n    generateFromTemplate: `${API_URL}/api/ai/generate-from-template`,\r\n    generateDirect: `${API_URL}/api/ai/generate-direct`,\r\n    generateBatch: `${API_URL}/api/ai/generate-batch`,\r\n    generationHistory: `${API_URL}/api/ai/history`,\r\n    \r\n    // Health check\r\n    health: `${API_URL}/api/health`\r\n  }\r\n}\r\n\r\n// API Fetch Helper\r\nexport const apiFetch = async (url, options = {}) => {\r\n  const token = localStorage.getItem('adminToken')\r\n  \r\n  const defaultOptions = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { 'Authorization': `Bearer ${token}` })\r\n    }\r\n  }\r\n  \r\n  const mergedOptions = {\r\n    ...defaultOptions,\r\n    ...options,\r\n    headers: {\r\n      ...defaultOptions.headers,\r\n      ...options.headers\r\n    }\r\n  }\r\n  \r\n  return fetch(url, mergedOptions)\r\n}\r\n\r\nexport default config","// 데모 서비스 - 백엔드 없이 프론트엔드에서 모의 응답 제공\r\n\r\nclass DemoService {\r\n  constructor() {\r\n    this.delay = 1000; // 실제 API 응답처럼 1초 지연\r\n  }\r\n\r\n  // 모의 지연 함수\r\n  async simulateDelay() {\r\n    return new Promise(resolve => setTimeout(resolve, this.delay));\r\n  }\r\n\r\n  // 관리자 로그인 모의 응답\r\n  async adminLogin(email, password) {\r\n    await this.simulateDelay();\r\n    \r\n    if (email === 'admin@inblanq.com' && password === '2025') {\r\n      return {\r\n        success: true,\r\n        token: 'demo-admin-token-12345',\r\n        user: {\r\n          id: 'demo-admin-id',\r\n          email: 'admin@inblanq.com',\r\n          role: 'admin'\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid credentials'\r\n      };\r\n    }\r\n  }\r\n\r\n  // AI 콘텐츠 생성 모의 응답\r\n  async generateContent(provider, contentType, prompt, options = {}) {\r\n    await this.simulateDelay();\r\n\r\n    const { targetAge = 'elem2', difficulty = 'beginner', contentLength = '800' } = options;\r\n\r\n    // 주제 추출 (프롬프트에서 주제를 파악)\r\n    const topic = this.extractTopic(prompt);\r\n\r\n    // 지문 생성\r\n    if (contentType === 'reading') {\r\n      const topicData = this.getTopicData(topic, targetAge);\r\n      \r\n      return {\r\n        success: true,\r\n        content: {\r\n          title: topicData.title,\r\n          description: `${this.getAgeDescription(targetAge)}을 위한 ${topicData.topic} 이야기`,\r\n          mainContent: {\r\n            introduction: this.generateReadingContent(contentLength, targetAge, topic),\r\n            keyPoints: topicData.keyPoints,\r\n            examples: topicData.examples\r\n          }\r\n        },\r\n        provider: provider,\r\n        timestamp: new Date().toISOString(),\r\n        tokensUsed: 150\r\n      };\r\n    }\r\n\r\n    // 어휘 생성\r\n    if (contentType === 'vocabulary') {\r\n      return {\r\n        success: true,\r\n        content: {\r\n          title: \"어휘 분석 결과\",\r\n          vocabularyList: [\r\n            {\r\n              word: \"관찰\",\r\n              meaning: \"자세히 살펴보는 것\",\r\n              synonyms: [\"구경\", \"살피기\"],\r\n              antonyms: [\"무시\", \"소홀\"],\r\n              difficulty: \"★★★☆☆\",\r\n              example: \"꽃을 관찰해보세요.\"\r\n            },\r\n            {\r\n              word: \"생명\",\r\n              meaning: \"살아있는 것\",\r\n              synonyms: [\"목숨\", \"삶\"],\r\n              antonyms: [\"죽음\"],\r\n              difficulty: \"★★☆☆☆\", \r\n              example: \"꽃도 생명이에요.\"\r\n            },\r\n            {\r\n              word: \"아름다운\",\r\n              meaning: \"보기 좋고 예쁜\",\r\n              synonyms: [\"예쁜\", \"곱다\"],\r\n              antonyms: [\"못생긴\", \"추한\"],\r\n              difficulty: \"★★☆☆☆\",\r\n              example: \"아름다운 꽃이 피었어요.\"\r\n            }\r\n          ]\r\n        },\r\n        provider: provider,\r\n        timestamp: new Date().toISOString(),\r\n        tokensUsed: 100\r\n      };\r\n    }\r\n\r\n    // 문제 생성\r\n    if (contentType === 'questions') {\r\n      return {\r\n        success: true,\r\n        content: {\r\n          title: \"서술형 문제\",\r\n          questions: [\r\n            {\r\n              type: \"내용 이해형\",\r\n              question: \"봄에 피는 꽃의 종류를 3가지 써보세요.\",\r\n              answerSpace: 3,\r\n              points: 10\r\n            },\r\n            {\r\n              type: \"맥락 추론형\", \r\n              question: \"글쓴이가 꽃을 꺾지 말라고 하는 이유를 써보세요.\",\r\n              answerSpace: 4,\r\n              points: 15\r\n            },\r\n            {\r\n              type: \"내용 이해형\",\r\n              question: \"꽃을 관찰할 때 주의할 점을 써보세요.\",\r\n              answerSpace: 3,\r\n              points: 10\r\n            },\r\n            {\r\n              type: \"맥락 추론형\",\r\n              question: \"자연이 우리에게 주는 의미를 생각해서 써보세요.\",\r\n              answerSpace: 5,\r\n              points: 20\r\n            },\r\n            {\r\n              type: \"내용 이해형\",\r\n              question: \"가족과 함께 꽃구경을 가면 좋은 이유를 써보세요.\",\r\n              answerSpace: 4,\r\n              points: 15\r\n            },\r\n            {\r\n              type: \"맥락 추론형\",\r\n              question: \"이 글을 읽고 느낀 점을 자유롭게 써보세요.\",\r\n              answerSpace: 5,\r\n              points: 20\r\n            }\r\n          ]\r\n        },\r\n        provider: provider,\r\n        timestamp: new Date().toISOString(),\r\n        tokensUsed: 120\r\n      };\r\n    }\r\n\r\n    // 해설 생성\r\n    if (contentType === 'answers') {\r\n      return {\r\n        success: true,\r\n        content: {\r\n          title: \"문제 해설\",\r\n          answers: [\r\n            {\r\n              questionNumber: 1,\r\n              correctAnswer: \"개나리, 진달래, 벚꽃\",\r\n              explanation: \"지문에서 봄에 피는 꽃으로 개나리(노란색), 진달래(분홍색), 벚꽃(하얀색, 분홍색)을 제시했습니다.\",\r\n              gradingCriteria: [\"3가지 꽃 이름 정확히 쓰기\", \"맞춤법 정확성\"],\r\n              tips: \"지문을 차근차근 읽으며 꽃 이름을 찾아보세요.\"\r\n            },\r\n            {\r\n              questionNumber: 2,\r\n              correctAnswer: \"꽃도 우리처럼 살아있는 생명이기 때문입니다.\",\r\n              explanation: \"글쓴이는 꽃도 생명체임을 강조하며 생명을 소중히 여겨야 한다고 말합니다.\",\r\n              gradingCriteria: [\"생명의 소중함 언급\", \"논리적 설명\"],\r\n              tips: \"지문에서 생명에 관련된 부분을 찾아보세요.\"\r\n            }\r\n          ]\r\n        },\r\n        provider: provider,\r\n        timestamp: new Date().toISOString(),\r\n        tokensUsed: 90\r\n      };\r\n    }\r\n\r\n    // 기본 응답\r\n    return {\r\n      success: true,\r\n      content: {\r\n        title: \"데모 콘텐츠\",\r\n        description: \"데모 모드에서 생성된 샘플 콘텐츠입니다.\"\r\n      },\r\n      provider: provider,\r\n      timestamp: new Date().toISOString(),\r\n      tokensUsed: 50\r\n    };\r\n  }\r\n\r\n  // 연령 설명 생성\r\n  getAgeDescription(targetAge) {\r\n    const ageMap = {\r\n      elem1: '초등학교 1학년',\r\n      elem2: '초등학교 2학년',\r\n      elem3: '초등학교 3학년',\r\n      elem4: '초등학교 4학년',\r\n      elem5: '초등학교 5학년',\r\n      elem6: '초등학교 6학년',\r\n      middle1: '중학교 1학년',\r\n      middle2: '중학교 2학년',\r\n      middle3: '중학교 3학년',\r\n      high1: '고등학교 1학년',\r\n      high2: '고등학교 2학년',\r\n      high3: '고등학교 3학년'\r\n    };\r\n    return ageMap[targetAge] || '초등학교 2학년';\r\n  }\r\n\r\n  // 주제 추출 (프롬프트에서)\r\n  extractTopic(prompt) {\r\n    if (!prompt) return 'game';\r\n    \r\n    const promptLower = prompt.toLowerCase();\r\n    \r\n    if (promptLower.includes('게임') || promptLower.includes('기술') || promptLower.includes('컴퓨터') || promptLower.includes('로봇')) {\r\n      return 'game';\r\n    } else if (promptLower.includes('스포츠') || promptLower.includes('축구') || promptLower.includes('운동')) {\r\n      return 'sports';\r\n    } else if (promptLower.includes('음악') || promptLower.includes('노래') || promptLower.includes('엔터테인먼트')) {\r\n      return 'music';\r\n    } else if (promptLower.includes('동물') || promptLower.includes('자연') || promptLower.includes('환경')) {\r\n      return 'nature';\r\n    } else if (promptLower.includes('과학') || promptLower.includes('우주') || promptLower.includes('실험')) {\r\n      return 'science';\r\n    } else if (promptLower.includes('음식') || promptLower.includes('요리') || promptLower.includes('맛')) {\r\n      return 'food';\r\n    } else {\r\n      return 'game'; // 기본값\r\n    }\r\n  }\r\n\r\n  // 주제별 데이터 생성\r\n  getTopicData(topic, targetAge) {\r\n    const topicMap = {\r\n      game: {\r\n        title: \"게임과 기술\",\r\n        topic: \"게임 & 기술\",\r\n        keyPoints: [\r\n          \"컴퓨터 게임은 재미있는 놀이입니다\",\r\n          \"기술 발전으로 게임이 더 발달했습니다\", \r\n          \"게임을 할 때는 시간을 지켜야 합니다\"\r\n        ],\r\n        examples: [\r\n          {\r\n            korean: \"친구들과 함께 게임을 하면 더 재미있어요.\",\r\n            explanation: \"협동하는 게임의 즐거움\"\r\n          }\r\n        ]\r\n      },\r\n      sports: {\r\n        title: \"스포츠와 건강\",\r\n        topic: \"스포츠\",\r\n        keyPoints: [\r\n          \"운동은 우리 몸을 건강하게 합니다\",\r\n          \"여러 가지 스포츠가 있습니다\",\r\n          \"팀워크가 중요합니다\"\r\n        ],\r\n        examples: [\r\n          {\r\n            korean: \"축구를 하면 다리 근육이 강해져요.\",\r\n            explanation: \"운동과 건강의 관계\"\r\n          }\r\n        ]\r\n      },\r\n      nature: {\r\n        title: \"동물과 자연\",\r\n        topic: \"동물 & 자연\",\r\n        keyPoints: [\r\n          \"자연에는 많은 동물들이 살고 있습니다\",\r\n          \"동물마다 다른 특징을 가지고 있습니다\",\r\n          \"자연을 보호해야 합니다\"\r\n        ],\r\n        examples: [\r\n          {\r\n            korean: \"숲에서 다람쥐가 도토리를 모으고 있어요.\",\r\n            explanation: \"동물의 생활 모습\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    return topicMap[topic] || topicMap.game;\r\n  }\r\n\r\n  // 글자 수에 맞는 읽기 지문 생성\r\n  generateReadingContent(contentLength, targetAge, topic = 'nature') {\r\n    const contentMap = {\r\n      game: {\r\n        base: \"요즘 컴퓨터 게임은 정말 재미있습니다. 스마트폰이나 컴퓨터로 여러 가지 게임을 할 수 있어요. 게임을 하면 친구들과 함께 즐길 수 있고, 새로운 것을 배울 수도 있습니다. 하지만 게임을 할 때는 시간을 정해서 해야 해요. 너무 오래 하면 눈이 아프고 공부할 시간이 부족해집니다. 게임은 재미있지만 적당히 하는 것이 좋습니다.\",\r\n        additional: \" 게임을 만드는 사람들을 개발자라고 부릅니다. 이들은 컴퓨터 프로그래밍을 배워서 재미있는 게임을 만들어요. 미래에는 더욱 발달한 기술로 더 재미있는 게임들이 나올 것입니다. 가상현실 게임이나 로봇과 함께 하는 게임도 있어요. 기술이 발전하면 우리 생활이 더욱 편리해집니다.\",\r\n        extra: \" 로봇 기술도 많이 발전했습니다. 집에서 청소를 도와주는 로봇이나 음성으로 대화할 수 있는 AI도 있어요. 인공지능은 사람처럼 생각하고 배울 수 있는 기술입니다. 앞으로 로봇이 더 똑똑해져서 우리 생활을 많이 도와줄 것입니다.\"\r\n      },\r\n      nature: {\r\n        base: \"따뜻한 봄이 오면 여러 가지 예쁜 꽃들이 피어납니다. 개나리는 노란색으로 먼저 피고, 진달래는 분홍색으로 예쁘게 핍니다. 벚꽃은 하얀색과 분홍색으로 피어서 마치 눈이 내린 것 같아요. 꽃들은 우리에게 봄이 왔다고 알려주는 친구들입니다. 꽃들을 보면 마음이 기뻐집니다. 우리는 꽃을 소중히 여겨야 해요. 꽃을 꺾지 말고 예쁘게 구경만 해야 합니다. 꽃들도 우리처럼 살아있는 생명이기 때문입니다.\",\r\n        additional: \" 봄에는 가족과 함께 꽃구경을 가면 좋겠어요. 공원이나 산에 가서 여러 가지 꽃들을 찾아보세요. 꽃의 색깔과 모양을 자세히 관찰해보면 정말 신기합니다. 자연은 우리에게 아름다운 선물을 주는 것 같아요. 꽃향기를 맡아보고, 나비나 벌들이 꽃을 찾아오는 모습도 관찰해보세요. 계절이 바뀌면서 피는 꽃들도 달라집니다.\",\r\n        extra: \" 여름에는 해바라기와 장미가 피고, 가을에는 코스모스와 국화가 아름답게 핍니다. 겨울에는 동백꽃이 추위를 이겨내며 붉게 피어납니다. 우리나라에는 정말 다양한 꽃들이 사계절 내내 피어나므로 언제든지 아름다운 자연을 만날 수 있습니다. 꽃을 통해 자연의 신비로움과 생명의 소중함을 배울 수 있어요.\"\r\n      },\r\n      sports: {\r\n        base: \"운동은 우리 몸을 건강하게 만들어 줍니다. 축구, 농구, 수영 등 여러 가지 스포츠가 있어요. 친구들과 함께 운동을 하면 더욱 재미있습니다. 운동을 하면 근육이 강해지고 심장도 건강해집니다. 매일 조금씩이라도 몸을 움직이는 것이 좋아요. 운동은 스트레스를 줄여주고 기분을 좋게 만들어 줍니다.\",\r\n        additional: \" 팀 스포츠를 하면 협동심을 기를 수 있어요. 서로 도와주고 응원하면서 함께 목표를 달성하는 기쁨을 느낄 수 있습니다. 올림픽이나 월드컵 같은 큰 대회를 보면서 선수들의 노력과 열정을 배울 수 있어요.\",\r\n        extra: \" 운동선수가 되려면 어릴 때부터 꾸준히 연습해야 합니다. 건강한 몸과 강한 정신력이 필요해요. 우리도 매일 운동하는 습관을 기르면 건강하고 행복한 생활을 할 수 있습니다.\"\r\n      }\r\n    };\r\n\r\n    const content = contentMap[topic] || contentMap.nature;\r\n    const { base, additional, extra } = content;\r\n\r\n    const targetLength = parseInt(contentLength);\r\n    let result = base;\r\n\r\n    if (targetLength >= 600) {\r\n      result += additional;\r\n    }\r\n    if (targetLength >= 1000) {\r\n      result += extra;\r\n    }\r\n\r\n    // 목표 길이에 근사하게 조정\r\n    if (result.length < targetLength) {\r\n      const paddingMap = {\r\n        game: \" 기술은 우리 생활을 더욱 편리하게 만들어 줍니다.\",\r\n        nature: \" 자연은 우리 생활에 기쁨과 아름다움을 가져다줍니다.\",\r\n        sports: \" 운동은 건강한 생활의 기초가 됩니다.\"\r\n      };\r\n      const padding = (paddingMap[topic] || paddingMap.nature).repeat(\r\n        Math.ceil((targetLength - result.length) / 30)\r\n      );\r\n      result += padding;\r\n    }\r\n\r\n    return result.substring(0, targetLength);\r\n  }\r\n\r\n  // 통계 정보 모의 응답\r\n  async getStats() {\r\n    await this.simulateDelay();\r\n    \r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalGenerations: 42,\r\n        totalTokens: 3580,\r\n        providerBreakdown: {\r\n          claude: { count: 25, tokens: 2100 },\r\n          gemini: { count: 17, tokens: 1480 }\r\n        },\r\n        contentTypeBreakdown: {\r\n          reading: { count: 15, tokens: 1800 },\r\n          vocabulary: { count: 12, tokens: 980 },\r\n          questions: { count: 10, tokens: 600 },\r\n          answers: { count: 5, tokens: 200 }\r\n        },\r\n        dailyUsage: {\r\n          '2025-08-01': { count: 8, tokens: 720 },\r\n          '2025-07-31': { count: 12, tokens: 1040 },\r\n          '2025-07-30': { count: 10, tokens: 850 }\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport default DemoService;","// Security utilities for API protection\n\n/**\n * Check if the current environment is allowed to use API keys\n */\nexport const isAllowedEnvironment = () => {\n  const hostname = window.location.hostname\n  const allowedHosts = [\n    'localhost',\n    '127.0.0.1',\n    'wonbyte-pro.vercel.app',\n    'wonbyte-pro-git-main-mingukang0719s-projects.vercel.app'\n  ]\n  \n  return allowedHosts.some(host => hostname.includes(host))\n}\n\n/**\n * Rate limiting for API calls\n */\nclass RateLimiter {\n  constructor(maxRequests = 10, windowMs = 60000) {\n    this.maxRequests = maxRequests\n    this.windowMs = windowMs\n    this.requests = []\n  }\n\n  canMakeRequest() {\n    const now = Date.now()\n    // Remove old requests outside the window\n    this.requests = this.requests.filter(time => now - time < this.windowMs)\n    \n    if (this.requests.length < this.maxRequests) {\n      this.requests.push(now)\n      return true\n    }\n    \n    return false\n  }\n\n  getRemainingTime() {\n    if (this.requests.length === 0) return 0\n    const oldestRequest = Math.min(...this.requests)\n    const now = Date.now()\n    return Math.max(0, this.windowMs - (now - oldestRequest))\n  }\n}\n\n// Create rate limiter instance (10 requests per minute)\nexport const apiRateLimiter = new RateLimiter(10, 60000)\n\n/**\n * Sanitize API responses to prevent XSS\n */\nexport const sanitizeApiResponse = (text) => {\n  if (typeof text !== 'string') return text\n  \n  // Remove any potential script tags or dangerous HTML\n  return text\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '')\n}\n\n/**\n * Log API usage for monitoring\n */\nexport const logApiUsage = (provider, success, error = null) => {\n  const usage = {\n    timestamp: new Date().toISOString(),\n    provider,\n    success,\n    error: error?.message || null,\n    hostname: window.location.hostname\n  }\n  \n  // In production, you might want to send this to an analytics service\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Usage:', usage)\n  }\n}","// Client-side AI Service for direct API calls\nimport { apiKeys } from '../config/apiKeys'\nimport { isAllowedEnvironment, apiRateLimiter, sanitizeApiResponse, logApiUsage } from '../utils/security'\n\nclass ClientAIService {\n  constructor() {\n    this.providers = {\n      openai: {\n        url: 'https://api.openai.com/v1/chat/completions',\n        headers: (apiKey) => ({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        }),\n        formatRequest: (prompt) => ({\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.7\n        }),\n        parseResponse: (data) => ({\n          success: true,\n          content: data.choices?.[0]?.message?.content || '',\n          metadata: {\n            provider: 'openai',\n            model: data.model,\n            tokensUsed: data.usage?.total_tokens || 0\n          }\n        })\n      },\n      anthropic: {\n        // Anthropic API는 CORS를 지원하지 않으므로 프록시 서버가 필요합니다\n        // 백엔드 서버를 통해 호출하거나, Vercel Edge Function을 사용해야 합니다\n        url: '/api/anthropic', // 프록시 엔드포인트\n        headers: (apiKey) => ({\n          'Content-Type': 'application/json',\n          'x-api-key': apiKey,\n          'anthropic-version': '2023-06-01'\n        }),\n        formatRequest: (prompt) => ({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 4000,\n          messages: [{\n            role: 'user',\n            content: prompt\n          }]\n        }),\n        parseResponse: (data) => ({\n          success: true,\n          content: data.content?.[0]?.text || '',\n          metadata: {\n            provider: 'anthropic',\n            model: data.model,\n            tokensUsed: data.usage?.total_tokens || 0\n          }\n        })\n      }\n    }\n  }\n\n  async generateContent(request) {\n    try {\n      // 환경 체크\n      if (!isAllowedEnvironment()) {\n        throw new Error('허용되지 않은 환경에서의 API 호출입니다.')\n      }\n\n      // Rate limiting 체크\n      if (!apiRateLimiter.canMakeRequest()) {\n        const remainingTime = Math.ceil(apiRateLimiter.getRemainingTime() / 1000)\n        throw new Error(`API 호출 제한을 초과했습니다. ${remainingTime}초 후에 다시 시도해주세요.`)\n      }\n\n      const { provider = 'openai', prompt } = request\n      const apiKey = apiKeys[provider]\n      \n      if (!apiKey) {\n        throw new Error(`${provider} API 키가 설정되지 않았습니다.`)\n      }\n\n      const providerConfig = this.providers[provider]\n      if (!providerConfig) {\n        throw new Error(`지원하지 않는 AI 제공자입니다: ${provider}`)\n      }\n\n      const response = await fetch(providerConfig.url, {\n        method: 'POST',\n        headers: providerConfig.headers(apiKey),\n        body: JSON.stringify(providerConfig.formatRequest(prompt))\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error?.message || `API 호출 실패: ${response.status}`)\n      }\n\n      const data = await response.json()\n      const result = providerConfig.parseResponse(data)\n      \n      // Sanitize response\n      if (result.content && typeof result.content === 'string') {\n        result.content = sanitizeApiResponse(result.content)\n      }\n      \n      // Log usage\n      logApiUsage(provider, true)\n      \n      return result\n\n    } catch (error) {\n      console.error('Client AI Service Error:', error)\n      logApiUsage(request.provider || 'openai', false, error)\n      throw error\n    }\n  }\n\n  // 한국어 읽기 지문 생성을 위한 특화 메서드\n  async generateReadingText(topic, grade, length, provider = 'openai') {\n    const prompt = `다음 조건에 맞는 한국어 읽기 지문을 작성해주세요:\n    \n주제: ${topic}\n학년 수준: ${grade}\n길이: 약 ${length}자\n\n지문 작성 시 다음 사항을 지켜주세요:\n1. 해당 학년 수준에 맞는 어휘와 문장 구조 사용\n2. 교육적이고 흥미로운 내용\n3. 명확한 주제와 구조를 가진 완성된 글\n4. 한국어 맞춤법과 문법 준수\n\n지문만 작성하고 다른 설명은 포함하지 마세요.`\n\n    const response = await this.generateContent({ provider, prompt })\n    \n    // 응답 텍스트 정제\n    let content = response.content\n    if (typeof content === 'string') {\n      content = content.trim()\n      // 제목과 본문 구분\n      const lines = content.split('\\n')\n      const title = lines[0]?.replace(/^#+ /, '') || `${topic} 이야기`\n      const mainContent = lines.slice(1).join('\\n').trim() || content\n      \n      response.content = {\n        title,\n        mainContent: {\n          introduction: mainContent\n        }\n      }\n    }\n    \n    return response\n  }\n\n  // 문해력 분석\n  async analyzeReadingLevel(text, gradeLevel, provider = 'openai') {\n    const prompt = `다음 텍스트의 문해력 난이도를 분석해주세요:\n\n텍스트: \"\"\"\n${text}\n\"\"\"\n\n대상 학년: ${gradeLevel}\n\n다음 5가지 기준으로 각각 1-10점으로 평가하고 간단한 설명을 제공해주세요:\n1. 텍스트 길이와 구조 (textLength)\n2. 어휘 난이도 (vocabularyLevel)\n3. 문장 복잡도 (sentenceComplexity)\n4. 내용 수준 (contentLevel)\n5. 배경지식 요구도 (backgroundKnowledge)\n\n응답 형식:\n{\n  \"textLength\": 점수,\n  \"vocabularyLevel\": 점수,\n  \"sentenceComplexity\": 점수,\n  \"contentLevel\": 점수,\n  \"backgroundKnowledge\": 점수,\n  \"totalScore\": 평균점수,\n  \"analysis\": \"종합 분석 설명\"\n}`\n\n    const response = await this.generateContent({ provider, prompt })\n    \n    try {\n      // JSON 파싱 시도\n      const content = response.content\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/)\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0])\n        response.content = parsed\n      } else {\n        // 파싱 실패 시 기본값\n        response.content = {\n          textLength: 5,\n          vocabularyLevel: 5,\n          sentenceComplexity: 5,\n          contentLevel: 5,\n          backgroundKnowledge: 5,\n          totalScore: 5,\n          analysis: '문해력 분석을 완료했습니다.'\n        }\n      }\n    } catch (e) {\n      console.error('분석 결과 파싱 오류:', e)\n    }\n    \n    return response\n  }\n\n  // 어휘 추출\n  async extractVocabulary(text, gradeLevel, count = 10, provider = 'openai') {\n    const prompt = `다음 텍스트에서 ${gradeLevel} 학생이 학습해야 할 핵심 어휘 ${count}개를 추출해주세요:\n\n텍스트: \"\"\"\n${text}\n\"\"\"\n\n각 어휘에 대해 다음 정보를 제공해주세요:\n- word: 단어\n- meaning: 의미 설명 (학년 수준에 맞게)\n- difficulty: 난이도 (★ 1-5개)\n- example: 예문\n\nJSON 배열 형식으로 응답해주세요.`\n\n    const response = await this.generateContent({ provider, prompt })\n    \n    try {\n      const content = response.content\n      const jsonMatch = content.match(/\\[[\\s\\S]*\\]/)\n      if (jsonMatch) {\n        const vocabularyList = JSON.parse(jsonMatch[0])\n        response.content = { vocabularyList }\n      } else {\n        // 파싱 실패 시 기본값\n        response.content = {\n          vocabularyList: [\n            { word: '학습', meaning: '배우고 익히는 것', difficulty: '★★★', example: '매일 꾸준히 학습해야 합니다.' }\n          ]\n        }\n      }\n    } catch (e) {\n      console.error('어휘 추출 파싱 오류:', e)\n    }\n    \n    return response\n  }\n\n  // 문제 생성\n  async generateProblems(text, problemType, count, provider = 'openai') {\n    const typeMap = {\n      vocabulary: '어휘',\n      comprehension: '독해',\n      inference: '추론',\n      critical: '비판적 사고'\n    }\n    \n    const prompt = `다음 지문을 바탕으로 ${typeMap[problemType] || problemType} 문제를 ${count}개 만들어주세요:\n\n지문: \"\"\"\n${text}\n\"\"\"\n\n각 문제는 다음 형식으로 작성해주세요:\n- id: 문제 번호\n- type: \"${problemType}\"\n- question: 문제\n- options: 4개의 선택지 배열\n- answer: 정답 인덱스 (0-3)\n- explanation: 해설\n\nJSON 배열 형식으로 응답해주세요.`\n\n    const response = await this.generateContent({ provider, prompt })\n    \n    try {\n      const content = response.content\n      const jsonMatch = content.match(/\\[[\\s\\S]*\\]/)\n      if (jsonMatch) {\n        const problems = JSON.parse(jsonMatch[0])\n        response.content = { problems }\n      } else {\n        // 파싱 실패 시 기본 문제\n        response.content = {\n          problems: [{\n            id: 1,\n            type: problemType,\n            question: '이 글의 주제는 무엇입니까?',\n            options: ['선택지 1', '선택지 2', '선택지 3', '선택지 4'],\n            answer: 0,\n            explanation: '이 글의 주제를 파악하는 문제입니다.'\n          }]\n        }\n      }\n    } catch (e) {\n      console.error('문제 생성 파싱 오류:', e)\n    }\n    \n    return response\n  }\n}\n\nexport default new ClientAIService()","// Frontend AI Service - CACHE BUST 2025-08-02-15:05\r\nimport { config } from '../config'\r\nimport DemoService from './demoService'\r\nimport ClientAIService from './clientAIService'\r\nimport { hasApiKeys } from '../config/apiKeys'\r\n\r\nclass AIService {\r\n  constructor() {\r\n    // FORCE CORRECT URL - CACHE BUSTING\r\n    this.baseURL = 'https://wonbyte-pro.onrender.com'\r\n    this.demoService = new DemoService()\r\n    this.clientAIService = ClientAIService\r\n    this.isDemo = false // Force disable demo mode\r\n    // 항상 백엔드 API 사용하도록 변경 (클라이언트 직접 호출 비활성화)\r\n    this.useClientAI = false\r\n    console.log('AIService Constructor - FORCED baseURL:', this.baseURL)\r\n  }\r\n\r\n  async generateContent(request) {\r\n    try {\r\n      // 클라이언트 AI 사용 가능한 경우\r\n      if (this.useClientAI) {\r\n        if (request.contentType === 'reading') {\r\n          const topic = request.prompt.match(/(.+)에 대한/)?.[1] || '주제'\r\n          const length = request.contentLength || 800\r\n          return await this.clientAIService.generateReadingText(topic, request.targetAge, length, request.provider)\r\n        }\r\n        return await this.clientAIService.generateContent(request)\r\n      }\r\n      \r\n      // 데모 모드인 경우 데모 서비스 사용\r\n      if (this.isDemo) {\r\n        // 데모 모드: 모의 AI 응답 사용\r\n        return await this.demoService.generateContent(\r\n          request.provider || 'claude',\r\n          request.contentType || 'reading',\r\n          request.prompt,\r\n          {\r\n            targetAge: request.targetAge,\r\n            difficulty: request.difficulty,\r\n            contentLength: request.contentLength\r\n          }\r\n        )\r\n      }\r\n\r\n      const url = `${this.baseURL}/api/ai/generate`\r\n      console.log('AI Service - Base URL:', this.baseURL)\r\n      console.log('AI Service - Full URL:', url)\r\n      console.log('AI Service - Request:', request)\r\n      console.log('AI Service - Timestamp:', new Date().toISOString())\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.error || 'AI 생성에 실패했습니다.')\r\n      }\r\n\r\n      return data\r\n\r\n    } catch (error) {\r\n      console.error('AI Service Error:', error)\r\n      \r\n      // AI 생성 실패 시 에러를 사용자에게 표시하고 재시도 유도\r\n      throw new Error(`AI 콘텐츠 생성에 실패했습니다. 잠시 후 다시 시도해주세요. (${error.message})`)\r\n    }\r\n  }\r\n\r\n  // 문해력 분석\r\n  async analyzeReadingLevel(text, gradeLevel) {\r\n    try {\r\n      if (this.useClientAI) {\r\n        return await this.clientAIService.analyzeReadingLevel(text, gradeLevel)\r\n      }\r\n\r\n      if (this.isDemo) {\r\n        // 데모 모드에서는 간단한 분석 로직 사용\r\n        return this.mockAnalyzeReadingLevel(text)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseURL}/api/ai/analyze-text`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          text,\r\n          grade: gradeLevel\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.error || '텍스트 분석에 실패했습니다.')\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('Reading Level Analysis Error:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 어휘 추출 및 분석\r\n  async extractVocabulary(text, gradeLevel, count = 20) {\r\n    try {\r\n      if (this.useClientAI) {\r\n        return await this.clientAIService.extractVocabulary(text, gradeLevel, count)\r\n      }\r\n\r\n      if (this.isDemo) {\r\n        return this.mockExtractVocabulary(text, count)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseURL}/api/ai/extract-vocabulary`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          text,\r\n          grade: gradeLevel,\r\n          count\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.error || '어휘 추출에 실패했습니다.')\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('Vocabulary Extraction Error:', error)\r\n      \r\n      // AI 어휘 추출 실패 시 에러를 사용자에게 표시\r\n      throw new Error(`어휘 추출에 실패했습니다. 잠시 후 다시 시도해주세요. (${error.message})`)\r\n    }\r\n  }\r\n\r\n  // 문해력 훈련 문제 생성\r\n  async generateReadingProblems(text, problemType, count, gradeLevel = 'elem4') {\r\n    try {\r\n      if (this.useClientAI) {\r\n        return await this.clientAIService.generateProblems(text, problemType, count)\r\n      }\r\n\r\n      if (this.isDemo) {\r\n        return this.mockGenerateProblems(text, problemType, count)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseURL}/api/ai/generate-problems`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          text,\r\n          grade: gradeLevel,\r\n          problemTypes: Array.isArray(problemType) ? problemType : [problemType],\r\n          count\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.error || '문제 생성에 실패했습니다.')\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('Problem Generation Error:', error)\r\n      \r\n      // AI 문제 생성 실패 시 에러를 사용자에게 표시\r\n      throw new Error(`문제 생성에 실패했습니다. 잠시 후 다시 시도해주세요. (${error.message})`)\r\n    }\r\n  }\r\n\r\n  // 데모 모드용 모의 함수들\r\n  mockAnalyzeReadingLevel(text) {\r\n    const charCount = text.length\r\n    const sentenceCount = text.split(/[.!?]/).filter(s => s.trim()).length\r\n    const avgSentenceLength = charCount / sentenceCount\r\n\r\n    return {\r\n      success: true,\r\n      content: {\r\n        textLength: Math.min(10, Math.round(charCount / 200)),\r\n        vocabularyLevel: Math.min(10, Math.round(avgSentenceLength / 5)),\r\n        sentenceComplexity: Math.min(10, Math.round(avgSentenceLength / 10)),\r\n        contentLevel: Math.min(10, 7),\r\n        backgroundKnowledge: Math.min(10, 5),\r\n        totalScore: Math.round((charCount / 200 + avgSentenceLength / 5 + avgSentenceLength / 10 + 7 + 5) / 5),\r\n        analysis: '이 지문은 해당 학년 수준에 적합한 난이도를 가지고 있습니다.'\r\n      }\r\n    }\r\n  }\r\n\r\n  mockExtractVocabulary(text, count) {\r\n    // 간단한 어휘 추출 (실제로는 형태소 분석 필요)\r\n    const words = ['학습', '이해', '발전', '노력', '성취', '목표', '과정', '결과', '방법', '전략']\r\n    const extracted = words.slice(0, Math.min(count, words.length))\r\n\r\n    return {\r\n      success: true,\r\n      content: {\r\n        vocabularyList: extracted.map(word => ({\r\n          word: word,\r\n          meaning: `${word}의 의미 설명`,\r\n          difficulty: '★★★☆☆',\r\n          example: `${word}을(를) 사용한 예문입니다.`\r\n        }))\r\n      }\r\n    }\r\n  }\r\n\r\n  mockGenerateProblems(text, problemType, count) {\r\n    const problems = []\r\n    \r\n    if (problemType === 'vocabulary') {\r\n      for (let i = 1; i <= count; i++) {\r\n        problems.push({\r\n          id: i,\r\n          type: 'vocabulary',\r\n          question: `문제 ${i}: 다음 단어의 의미로 가장 적절한 것은?`,\r\n          word: '예시단어',\r\n          options: ['의미1', '의미2', '의미3', '의미4'],\r\n          answer: 0,\r\n          explanation: '이 단어는 이런 의미를 가지고 있습니다.'\r\n        })\r\n      }\r\n    } else {\r\n      for (let i = 1; i <= count; i++) {\r\n        problems.push({\r\n          id: i,\r\n          type: 'comprehension',\r\n          question: `문제 ${i}: 이 글의 내용과 일치하는 것은?`,\r\n          options: ['선택지1', '선택지2', '선택지3', '선택지4'],\r\n          answer: 0,\r\n          explanation: '지문의 이 부분에서 확인할 수 있습니다.'\r\n        })\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      content: {\r\n        problems: problems\r\n      }\r\n    }\r\n  }\r\n\r\n  async getProviderStatus() {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/api/ai/status`)\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n      return data.status\r\n\r\n    } catch (error) {\r\n      console.error('AI Status Error:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 콘텐츠 생성 헬퍼 메서드들\r\n  async generateVocabulary(prompt, options = {}) {\r\n    return this.generateContent({\r\n      contentType: 'vocabulary',\r\n      prompt,\r\n      ...options\r\n    })\r\n  }\r\n\r\n  async generateGrammar(prompt, options = {}) {\r\n    return this.generateContent({\r\n      contentType: 'grammar',\r\n      prompt,\r\n      ...options\r\n    })\r\n  }\r\n\r\n  async generateReading(prompt, options = {}) {\r\n    return this.generateContent({\r\n      contentType: 'reading',\r\n      prompt,\r\n      ...options\r\n    })\r\n  }\r\n\r\n  async generateQuiz(prompt, options = {}) {\r\n    return this.generateContent({\r\n      contentType: 'quiz',\r\n      prompt,\r\n      ...options\r\n    })\r\n  }\r\n\r\n  // 콘텐츠 타입별 샘플 프롬프트\r\n  getSamplePrompts() {\r\n    return {\r\n      vocabulary: [\r\n        \"한국어 인사말에 대한 어휘 학습 자료를 만들어주세요\",\r\n        \"음식 관련 한국어 단어들을 정리해주세요\", \r\n        \"한국의 전통 문화 관련 어휘를 학습할 수 있는 자료를 만들어주세요\"\r\n      ],\r\n      grammar: [\r\n        \"한국어 존댓말과 반말의 차이를 설명해주세요\",\r\n        \"한국어 조사 '은/는'과 '이/가'의 사용법을 알려주세요\",\r\n        \"한국어 시제 표현에 대해 설명해주세요\"\r\n      ],\r\n      reading: [\r\n        \"한국의 사계절에 대한 읽기 자료를 만들어주세요\",\r\n        \"한국의 전통 음식 소개 글을 작성해주세요\",\r\n        \"한국 대학생의 일상생활에 대한 글을 써주세요\"\r\n      ],\r\n      quiz: [\r\n        \"한국어 기초 어휘 퀴즈를 만들어주세요\",\r\n        \"한국 문화에 대한 이해도를 확인하는 퀴즈를 만들어주세요\",\r\n        \"한국어 문법 실력을 테스트하는 문제를 만들어주세요\"\r\n      ]\r\n    }\r\n  }\r\n\r\n  // 난이도별 안내\r\n  getDifficultyGuide() {\r\n    return {\r\n      beginner: {\r\n        label: '초급',\r\n        description: '한글을 읽을 수 있고 기본 단어 500개 정도 아는 수준',\r\n        features: ['로마자 표기 포함', '쉬운 어휘 사용', '단순한 문장 구조']\r\n      },\r\n      intermediate: {\r\n        label: '중급', \r\n        description: '일상 대화가 가능하고 기본 문법을 아는 수준',\r\n        features: ['실용적인 표현', '다양한 문법 활용', '문화적 맥락 포함']\r\n      },\r\n      advanced: {\r\n        label: '고급',\r\n        description: '복잡한 문장을 이해하고 뉘앙스를 구분할 수 있는 수준', \r\n        features: ['고급 어휘', '복잡한 문법', '추상적 개념']\r\n      }\r\n    }\r\n  }\r\n\r\n  // 대상 연령별 안내\r\n  getAgeGuide() {\r\n    return {\r\n      child: {\r\n        label: '어린이',\r\n        description: '재미있고 쉬운 예시, 그림이나 게임 요소 포함',\r\n        features: ['놀이 중심', '시각적 요소', '반복 학습']\r\n      },\r\n      teen: {\r\n        label: '청소년',\r\n        description: '학교생활, 친구 관계 등 관련 예시',\r\n        features: ['학급 친화적', '또래 문화', '실용적 회화']\r\n      },\r\n      adult: {\r\n        label: '성인',\r\n        description: '직장생활, 사회생활 등 실용적 예시',\r\n        features: ['비즈니스 한국어', '공식적 표현', '사회 문화']\r\n      },\r\n      senior: {\r\n        label: '시니어',\r\n        description: '천천히, 자세히, 반복 설명 위주',\r\n        features: ['체계적 설명', '충분한 연습', '반복 강화']\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AIService()","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + \"2ee03ff1993f09ed25b2\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwonbyte_pro\"] = self[\"webpackChunkwonbyte_pro\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(280)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","HomePage","_jsxs","className","children","_jsx","FileText","href","Link","to","ArrowRight","id","Sparkles","Palette","Zap","Download","TextBlock","x","y","width","height","text","fontSize","fontFamily","color","isSelected","onSelect","onUpdate","onDelete","isEditing","setIsEditing","useState","isDragging","setIsDragging","dragStart","setDragStart","localText","setLocalText","textareaRef","useRef","handleMouseMove","e","newX","clientX","newY","clientY","handleMouseUp","handleTextBlur","useEffect","document","addEventListener","removeEventListener","current","focus","select","_Fragment","style","left","top","onMouseDown","target","tagName","preventDefault","onDoubleClick","handleDoubleClick","ref","value","onChange","onBlur","onKeyDown","key","shiftKey","placeholder","whiteSpace","wordBreak","onClick","title","Type","Trash2","EditorPage","navigate","useNavigate","zoom","setZoom","showGrid","setShowGrid","selectedTool","setSelectedTool","aiProvider","setAiProvider","isGenerating","setIsGenerating","showAiPanel","setShowAiPanel","aiPrompt","setAiPrompt","contentType","setContentType","difficulty","setDifficulty","targetAge","setTargetAge","contentLength","setContentLength","generatedContent","setGeneratedContent","blocks","setBlocks","selectedBlockId","setSelectedBlockId","showVocabularyPanel","setShowVocabularyPanel","vocabularyData","setVocabularyData","selectedVocabulary","setSelectedVocabulary","isGeneratingVocabulary","setIsGeneratingVocabulary","showQuestionPanel","setShowQuestionPanel","questionData","setQuestionData","selectedQuestions","setSelectedQuestions","isGeneratingQuestions","setIsGeneratingQuestions","currentPage","setCurrentPage","pages","setPages","main","vocabulary","questions","answers","isGeneratingAnswers","setIsGeneratingAnswers","answerData","setAnswerData","generateBlockId","Date","now","toString","Math","random","substr","updateBlock","updates","prev","map","block","deleteBlock","filter","selectBlock","ageGuides","elem1","elem2","elem3","elem4","elem5","elem6","middle1","middle2","middle3","high1","high2","high3","Home","Save","Undo","Redo","label","icon","page","switchPage","pageType","length","handleZoomOut","max","ZoomOut","handleZoomIn","min","ZoomIn","Grid","async","allPages","pagesWithContent","Object","entries","_","pageBlocks","alert","PDFService","default","openPDFPreview","Error","error","console","message","Image","Table","HelpCircle","tool","handleToolClick","toolId","addTextBlock","newBlock","type","backgroundColor","backgroundImage","backgroundSize","transform","transformOrigin","currentTarget","vocabularyList","vocab","index","word","checked","includes","i","meaning","synonyms","join","antonyms","example","log","disabled","question","answerSpace","points","aiService","selectedQuestionsList","result","generateContent","provider","prompt","q","idx","content","description","mainContent","introduction","keyPoints","point","examples","korean","english","explanation","exercises","exercise","options","option","optIdx","correctAnswer","addGeneratedContentToPage","yOffset","blockSpacing","titleBlock","descBlock","introBlock","keyPointsText","keyPointsBlock","forEach","exampleText","exampleBlock","trim","CONSTANTS","freeze","API_PROVIDERS","OPENAI","CLAUDE","GEMINI","CONTENT_TYPES","READING","VOCABULARY","GRAMMAR","QUESTIONS","ANSWERS","DIFFICULTY_LEVELS","BEGINNER","INTERMEDIATE","ADVANCED","TEXT_LENGTH","SHORT","MEDIUM","LONG","MIN","MAX","PROBLEM_COUNT","DEFAULT","FILE_UPLOAD","ACCEPTED_TYPES","MAX_SIZE","MIME_TYPES","TXT","DOCX","PDF","ERROR_MESSAGES","GENERIC","NETWORK","API_KEY","FILE_TYPE","FILE_SIZE","EMPTY_TEXT","MIN_LENGTH","MAX_LENGTH","SUCCESS_MESSAGES","TEXT_GENERATED","ANALYSIS_COMPLETE","PROBLEMS_GENERATED","PDF_CREATED","LOADING_MESSAGES","GENERATING_TEXT","ANALYZING","GENERATING_PROBLEMS","PROCESSING_FILE","TOPIC_CATEGORIES","keywords","GRADE_OPTIONS","age","LENGTH_OPTIONS","ErrorMessage","onClose","styles","bg","border","warning","info","AlertCircle","X","ProgressBar","showValue","size","percentage","textSizeClasses","small","medium","large","round","blue","green","yellow","red","purple","role","memo","analysisResult","analysisItems","score","textLength","vocabularyLevel","sentenceComplexity","contentLevel","backgroundKnowledge","item","totalScore","problem","onAnswerSelect","optIndex","name","handleOptionSelect","optionIndex","EditableText","onSave","onCancel","editClassName","displayClassName","maxLength","rows","autoFocus","validator","formatDisplay","renderDisplay","editable","editValue","setEditValue","validationError","setValidationError","inputRef","startEditing","useCallback","saveEditing","cancelEditing","handleKeyDown","displayValue","Edit3","showCharCount","onTextChange","charCount","useMemo","sentenceCount","split","s","VocabularyExtractor","gradeLevel","onVocabularyChange","setVocabularyList","isExtracting","setIsExtracting","newWord","setNewWord","editingId","setEditingId","editingData","setEditingData","setError","extractVocabulary","response","success","extractedWords","isChecked","isCustom","etymology","gradeAppropriate","addCustomVocabulary","count","wordData","customWord","updatedList","toggleVocabularyCheck","removeVocabulary","selectedCount","BookOpen","RotateCcw","onKeyPress","Plus","Check","synonym","antonym","ProblemGenerator","onProblemsChange","problems","setProblems","editingProblem","setEditingProblem","generateProblems","generateReadingProblems","generatedProblems","expectedLength","sampleAnswer","gradingCriteria","startEditingProblem","saveEditingProblem","updatedProblems","cancelEditingProblem","addNewProblem","newProblem","removeProblem","changeProblemType","undefined","FileQuestion","RefreshCw","newOptions","criteria","p","ReadingTrainerPage","mode","setMode","step","setStep","selectedTopic","setSelectedTopic","customTopic","setCustomTopic","selectedGrade","setSelectedGrade","selectedLength","setSelectedLength","customLength","setCustomLength","selectedProvider","setSelectedProvider","availableProviders","getAvailableProviders","generatedText","setGeneratedText","userText","setUserText","errorMessage","setErrorMessage","analyzing","analyzeText","setAnalysisResult","setAnalyzing","analyzeReadingLevelLocal","avgSentenceLength","avgWordLength","analyzeReadingLevel","localAnalysis","resetAnalysis","useTextAnalysis","vocabularyProblems","setVocabularyProblems","readingProblems","setReadingProblems","setGeneratedProblems","selectedProblemCount","reading","inputType","setInputType","uploadedFile","setUploadedFile","urlInput","setUrlInput","isProcessing","setIsProcessing","execute","generateTextApi","loading","generatingText","apiFunction","data","setData","setLoading","abortControllerRef","args","abort","AbortController","signal","err","reset","useApiCall","params","executeAll","generateProblemsApi","generatingProblems","errors","setErrors","results","Promise","allSettled","apiCalls","successResults","failedResults","status","push","reason","failed","hasErrors","useParallelApiCalls","handleGenerateText","topic","gradeInfo","find","grade","parseInt","handleAnalyzeText","textToAnalyze","handleVocabularyChange","handleProblemsChange","problemsList","handleTextEdit","newText","handleFileUpload","file","event","files","validation","isValid","fileExtension","pop","toLowerCase","fileType","fileName","fileSize","validateFile","reader","FileReader","onload","readAsText","answer","handlePDFDownload","textToExport","gradeLabel","g","fetch","config","apiUrl","method","headers","body","JSON","stringify","selected","ok","json","printWindow","window","open","write","htmlContent","close","setTimeout","Upload","rel","Globe","htmlFor","accept","toFixed","textToProcess","TextDisplay","AnalysisChart","ProblemCard","AdminLogin","email","setEmail","password","setPassword","isLoading","setIsLoading","Lock","onSubmit","endpoints","adminLogin","token","localStorage","setItem","autoComplete","required","User","AdminDashboard","stats","setStats","totalUsers","totalContent","todayGenerated","activeUsers","getItem","BarChart3","handleLogout","removeItem","LogOut","Users","toLocaleString","user","time","Settings","createClient","supabase","url","anonKey","TemplateCard","template","onEdit","grammar","quiz","content_type","beginner","intermediate","advanced","target_age","TemplateModal","formData","setFormData","template_prompt","variables","addVariable","variable","newVars","TemplateManager","templates","setTemplates","showModal","setShowModal","editingTemplate","setEditingTemplate","fetchTemplates","handleEdit","handleDelete","confirm","ContentGenerator","selectedTemplate","setSelectedTemplate","setVariables","setProvider","apiFetch","adminTemplates","templateId","t","vars","v","handleTemplateSelect","generateFromTemplate","errorData","viewBox","cx","cy","r","stroke","strokeWidth","fill","d","metadata","tokensUsed","generationTime","templateUsed","copyToClipboard","navigator","clipboard","writeText","openInEditor","sessionStorage","AdminDashboardWithRoutes","location","useLocation","isAdmin","adminToken","isActive","path","pathname","BarChart","FileCode","History","Routes","Route","element","DashboardHome","GenerationHistory","UsageAnalytics","Router","basename","ReactDOM","getElementById","render","React","App","getEnvVar","apiKeys","openai","anthropic","API_URL","isDevelopment","process","isProduction","demo","adminStats","generateDirect","generateBatch","generationHistory","health","defaultOptions","mergedOptions","constructor","this","delay","simulateDelay","resolve","extractTopic","topicData","getTopicData","getAgeDescription","generateReadingContent","timestamp","toISOString","questionNumber","tips","promptLower","topicMap","game","sports","nature","contentMap","base","additional","extra","targetLength","paddingMap","repeat","ceil","substring","getStats","totalGenerations","totalTokens","providerBreakdown","claude","tokens","gemini","contentTypeBreakdown","dailyUsage","apiRateLimiter","maxRequests","windowMs","requests","canMakeRequest","getRemainingTime","oldestRequest","logApiUsage","hostname","providers","apiKey","formatRequest","model","messages","temperature","parseResponse","choices","usage","total_tokens","max_tokens","request","isAllowedEnvironment","some","host","remainingTime","providerConfig","replace","generateReadingText","lines","slice","jsonMatch","match","parsed","parse","analysis","problemType","comprehension","inference","critical","baseURL","demoService","DemoService","clientAIService","ClientAIService","isDemo","useClientAI","mockAnalyzeReadingLevel","mockExtractVocabulary","mockGenerateProblems","problemTypes","Array","isArray","words","getProviderStatus","generateVocabulary","generateGrammar","generateReading","generateQuiz","getSamplePrompts","getDifficultyGuide","features","getAgeGuide","child","teen","adult","senior","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","getPrototypeOf","obj","__esModule","then","ns","create","def","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","f","chunkId","all","reduce","promises","u","miniCssF","globalThis","Function","prop","prototype","hasOwnProperty","l","done","script","needAttach","scripts","getElementsByTagName","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","onerror","clearTimeout","doneFns","parentNode","removeChild","bind","head","appendChild","Symbol","toStringTag","installedChunks","installedChunkData","promise","reject","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}